
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import exceptions.*;
import callgraph.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\012\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\005\004" +
    "\000\002\005\002\000\002\006\007\000\002\006\002\000" +
    "\002\007\004\000\002\007\002\000\002\010\007\000\002" +
    "\010\002\000\002\011\004\000\002\011\002\000\002\012" +
    "\007\000\002\012\002\000\002\013\007\000\002\013\002" +
    "\000\002\032\005\000\002\014\006\000\002\033\005\000" +
    "\002\033\004\000\002\033\002\000\002\040\005\000\002" +
    "\040\003\000\002\034\006\000\002\015\003\000\002\015" +
    "\002\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\037\005\000" +
    "\002\016\005\000\002\016\003\000\002\017\005\000\002" +
    "\017\002\000\002\036\006\000\002\031\003\000\002\031" +
    "\005\000\002\020\003\000\002\020\005\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\002\000\002\022\007\000\002" +
    "\023\011\000\002\024\007\000\002\024\002\000\002\027" +
    "\004\000\002\027\002\000\002\030\006\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\006\000\002" +
    "\030\003\000\002\025\004\000\002\041\005\000\002\041" +
    "\004\000\002\043\003\000\002\043\005\000\002\026\006" +
    "\000\002\042\005\000\002\042\004\000\002\042\004\000" +
    "\002\042\005\000\002\042\004\000\002\042\004\000\002" +
    "\042\005\000\002\042\004\000\002\042\004\000\002\042" +
    "\005\000\002\042\004\000\002\042\004\000\002\042\005" +
    "\000\002\042\004\000\002\042\004\000\002\042\005\000" +
    "\002\042\004\000\002\042\004\000\002\042\003\000\002" +
    "\044\003\000\002\044\004\000\002\044\004\000\002\045" +
    "\005\000\002\045\004\000\002\045\005\000\002\045\004" +
    "\000\002\045\005\000\002\045\004\000\002\045\004\000" +
    "\002\045\003\000\002\046\003\000\002\046\005\000\002" +
    "\046\004\000\002\046\005\000\002\046\004\000\002\046" +
    "\005\000\002\046\004\000\002\046\005\000\002\046\004" +
    "\000\002\046\004\000\002\047\004\000\002\047\003\000" +
    "\002\047\005\000\002\047\004\000\002\050\005\000\002" +
    "\050\006\000\002\050\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\032\005\001\002\000\004\002\314\001" +
    "\002\000\004\060\006\001\002\000\004\050\007\001\002" +
    "\000\016\033\010\034\ufffb\035\ufffb\036\ufffb\045\ufffb\046" +
    "\ufffb\001\002\000\016\034\ufff9\035\ufff9\036\ufff9\045\ufff9" +
    "\046\ufff9\060\ufff9\001\002\000\006\045\173\046\ufffe\001" +
    "\002\000\014\034\014\035\ufff7\036\ufff7\045\ufff7\046\ufff7" +
    "\001\002\000\012\035\156\036\ufff3\045\ufff3\046\ufff3\001" +
    "\002\000\014\035\ufff5\036\ufff5\045\ufff5\046\ufff5\060\ufff5" +
    "\001\002\000\014\035\ufff8\036\ufff8\045\ufff8\046\ufff8\060" +
    "\016\001\002\000\004\012\017\001\002\000\014\023\021" +
    "\024\026\030\020\031\027\060\023\001\002\000\010\046" +
    "\uffdb\050\uffdb\060\144\001\002\000\010\046\uffe1\050\uffe1" +
    "\057\uffe1\001\002\000\004\050\141\001\002\000\010\046" +
    "\uffe4\050\uffe4\057\uffe4\001\002\000\010\046\uffe2\050\uffe2" +
    "\057\uffe2\001\002\000\010\046\uffe3\050\uffe3\057\uffe3\001" +
    "\002\000\010\046\uffe0\050\uffe0\057\uffe0\001\002\000\044" +
    "\004\034\005\052\006\030\007\046\010\031\012\054\013" +
    "\055\014\033\015\042\016\041\017\051\020\035\021\032" +
    "\022\036\056\040\060\037\061\044\001\002\000\012\022" +
    "\036\056\040\060\037\061\044\001\002\000\012\022\036" +
    "\056\040\060\037\061\044\001\002\000\012\022\036\056" +
    "\040\060\037\061\044\001\002\000\030\004\034\005\052" +
    "\006\030\007\046\010\031\020\035\021\032\022\036\056" +
    "\040\060\037\061\044\001\002\000\024\006\030\007\046" +
    "\010\031\020\035\021\032\022\036\056\040\060\037\061" +
    "\044\001\002\000\022\006\030\007\046\010\031\021\032" +
    "\022\036\056\040\060\037\061\044\001\002\000\012\022" +
    "\036\056\040\060\037\061\044\001\002\000\074\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\044\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\001\002\000\044\004\034\005\052\006" +
    "\030\007\046\010\031\012\054\013\055\014\033\015\042" +
    "\016\041\017\051\020\035\021\032\022\036\056\040\060" +
    "\037\061\044\001\002\000\030\004\034\005\052\006\030" +
    "\007\046\010\031\020\035\021\032\022\036\056\040\060" +
    "\037\061\044\001\002\000\030\004\034\005\052\006\030" +
    "\007\046\010\031\020\035\021\032\022\036\056\040\060" +
    "\037\061\044\001\002\000\004\047\116\001\002\000\070" +
    "\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\012\uff91\013" +
    "\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91" +
    "\022\uff91\040\uff91\041\uff91\042\uff91\044\uff91\046\uff91\047" +
    "\uff91\050\uff91\052\uff91\055\uff91\056\uff91\057\uff91\060\uff91" +
    "\061\uff91\001\002\000\070\004\uff9c\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\022\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\044\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\001\002\000\012\022" +
    "\036\056\040\060\037\061\044\001\002\000\070\004\uff9d" +
    "\005\uff9d\006\070\007\065\010\066\012\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\064\022\036" +
    "\040\uff9d\041\uff9d\042\uff9d\044\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\052\uff9d\055\uff9d\056\040\057\uff9d\060\037\061\044" +
    "\001\002\000\042\012\101\013\106\014\102\015\104\016" +
    "\103\017\105\040\uffa8\041\uffa8\042\uffa8\044\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\052\uffa8\055\uffa8\057\uffa8\001\002\000" +
    "\030\004\034\005\052\006\030\007\046\010\031\020\035" +
    "\021\032\022\036\056\040\060\037\061\044\001\002\000" +
    "\024\006\030\007\046\010\031\020\035\021\032\022\036" +
    "\056\040\060\037\061\044\001\002\000\050\004\060\005" +
    "\061\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7" +
    "\020\062\040\uffa7\041\uffa7\042\uffa7\044\uffa7\046\uffa7\047" +
    "\uffa7\050\uffa7\052\uffa7\055\uffa7\057\uffa7\001\002\000\030" +
    "\004\034\005\052\006\030\007\046\010\031\020\035\021" +
    "\032\022\036\056\040\060\037\061\044\001\002\000\030" +
    "\004\034\005\052\006\030\007\046\010\031\020\035\021" +
    "\032\022\036\056\040\060\037\061\044\001\002\000\026" +
    "\040\uffb5\041\uffb5\042\uffb5\044\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\052\uffb5\055\uffb5\057\uffb5\001\002\000\026\040\uffb8" +
    "\041\uffb8\042\uffb8\044\uffb8\046\uffb8\047\uffb8\050\uffb8\052" +
    "\uffb8\055\uffb8\057\uffb8\001\002\000\070\004\uffa3\005\uffa3" +
    "\006\030\007\046\010\031\012\uffa3\013\uffa3\014\uffa3\015" +
    "\uffa3\016\uffa3\017\uffa3\020\uffa3\021\032\022\036\040\uffa3" +
    "\041\uffa3\042\uffa3\044\uffa3\046\uffa3\047\uffa3\050\uffa3\052" +
    "\uffa3\055\uffa3\056\040\057\uffa3\060\037\061\044\001\002" +
    "\000\070\004\uffa1\005\uffa1\006\030\007\046\010\031\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1" +
    "\021\032\022\036\040\uffa1\041\uffa1\042\uffa1\044\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\052\uffa1\055\uffa1\056\040\057\uffa1" +
    "\060\037\061\044\001\002\000\070\004\uff9f\005\uff9f\006" +
    "\030\007\046\010\031\012\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\032\022\036\040\uff9f\041" +
    "\uff9f\042\uff9f\044\uff9f\046\uff9f\047\uff9f\050\uff9f\052\uff9f" +
    "\055\uff9f\056\040\057\uff9f\060\037\061\044\001\002\000" +
    "\070\004\uffa0\005\uffa0\006\070\007\065\010\066\012\uffa0" +
    "\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021" +
    "\064\022\036\040\uffa0\041\uffa0\042\uffa0\044\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\052\uffa0\055\uffa0\056\040\057\uffa0\060" +
    "\037\061\044\001\002\000\012\022\036\056\040\060\037" +
    "\061\044\001\002\000\012\022\036\056\040\060\037\061" +
    "\044\001\002\000\012\022\036\056\040\060\037\061\044" +
    "\001\002\000\070\004\uff93\005\uff93\006\uff93\007\uff93\010" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\uff93\021\uff93\022\uff93\040\uff93\041\uff93\042\uff93\044" +
    "\uff93\046\uff93\047\uff93\050\uff93\052\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\001\002\000\012\022\036\056" +
    "\040\060\037\061\044\001\002\000\070\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\040\uff9b" +
    "\041\uff9b\042\uff9b\044\uff9b\046\uff9b\047\uff9b\050\uff9b\052" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\001\002" +
    "\000\070\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\012" +
    "\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\022\uff97\040\uff97\041\uff97\042\uff97\044\uff97\046" +
    "\uff97\047\uff97\050\uff97\052\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\001\002\000\070\004\uff99\005\uff99\006" +
    "\uff99\007\uff99\010\uff99\012\uff99\013\uff99\014\uff99\015\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\040\uff99\041" +
    "\uff99\042\uff99\044\uff99\046\uff99\047\uff99\050\uff99\052\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\001\002\000" +
    "\070\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021" +
    "\uff95\022\uff95\040\uff95\041\uff95\042\uff95\044\uff95\046\uff95" +
    "\047\uff95\050\uff95\052\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\001\002\000\070\004\uffa2\005\uffa2\006\070" +
    "\007\065\010\066\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\021\064\022\036\040\uffa2\041\uffa2" +
    "\042\uffa2\044\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2\055" +
    "\uffa2\056\040\057\uffa2\060\037\061\044\001\002\000\070" +
    "\004\uffa4\005\uffa4\006\070\007\065\010\066\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\064" +
    "\022\036\040\uffa4\041\uffa4\042\uffa4\044\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\052\uffa4\055\uffa4\056\040\057\uffa4\060\037" +
    "\061\044\001\002\000\050\004\060\005\061\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\062\040\uffa5" +
    "\041\uffa5\042\uffa5\044\uffa5\046\uffa5\047\uffa5\050\uffa5\052" +
    "\uffa5\055\uffa5\057\uffa5\001\002\000\026\040\uffac\041\uffac" +
    "\042\uffac\044\uffac\046\uffac\047\uffac\050\uffac\052\uffac\055" +
    "\uffac\057\uffac\001\002\000\054\004\034\005\052\006\030" +
    "\007\046\010\031\020\035\021\032\022\036\040\uffb9\041" +
    "\uffb9\042\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\052\uffb9" +
    "\055\uffb9\056\040\057\uffb9\060\037\061\044\001\002\000" +
    "\054\004\034\005\052\006\030\007\046\010\031\020\035" +
    "\021\032\022\036\040\uffb0\041\uffb0\042\uffb0\044\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\052\uffb0\055\uffb0\056\040\057\uffb0" +
    "\060\037\061\044\001\002\000\054\004\034\005\052\006" +
    "\030\007\046\010\031\020\035\021\032\022\036\040\uffaa" +
    "\041\uffaa\042\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa\052" +
    "\uffaa\055\uffaa\056\040\057\uffaa\060\037\061\044\001\002" +
    "\000\054\004\034\005\052\006\030\007\046\010\031\020" +
    "\035\021\032\022\036\040\uffb3\041\uffb3\042\uffb3\044\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\052\uffb3\055\uffb3\056\040\057" +
    "\uffb3\060\037\061\044\001\002\000\054\004\034\005\052" +
    "\006\030\007\046\010\031\020\035\021\032\022\036\040" +
    "\uffad\041\uffad\042\uffad\044\uffad\046\uffad\047\uffad\050\uffad" +
    "\052\uffad\055\uffad\056\040\057\uffad\060\037\061\044\001" +
    "\002\000\054\004\034\005\052\006\030\007\046\010\031" +
    "\020\035\021\032\022\036\040\uffb6\041\uffb6\042\uffb6\044" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\052\uffb6\055\uffb6\056\040" +
    "\057\uffb6\060\037\061\044\001\002\000\026\040\uffb7\041" +
    "\uffb7\042\uffb7\044\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7" +
    "\055\uffb7\057\uffb7\001\002\000\026\040\uffae\041\uffae\042" +
    "\uffae\044\uffae\046\uffae\047\uffae\050\uffae\052\uffae\055\uffae" +
    "\057\uffae\001\002\000\026\040\uffb4\041\uffb4\042\uffb4\044" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\052\uffb4\055\uffb4\057\uffb4" +
    "\001\002\000\026\040\uffab\041\uffab\042\uffab\044\uffab\046" +
    "\uffab\047\uffab\050\uffab\052\uffab\055\uffab\057\uffab\001\002" +
    "\000\026\040\uffb1\041\uffb1\042\uffb1\044\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\052\uffb1\055\uffb1\057\uffb1\001\002\000\026" +
    "\040\uffba\041\uffba\042\uffba\044\uffba\046\uffba\047\uffba\050" +
    "\uffba\052\uffba\055\uffba\057\uffba\001\002\000\070\004\uff98" +
    "\005\uff98\006\uff98\007\uff98\010\uff98\012\uff98\013\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\022\uff98" +
    "\040\uff98\041\uff98\042\uff98\044\uff98\046\uff98\047\uff98\050" +
    "\uff98\052\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98" +
    "\001\002\000\014\023\021\024\026\030\020\031\027\060" +
    "\023\001\002\000\010\046\uffda\050\uffda\057\uffda\001\002" +
    "\000\026\040\uffb2\041\uffb2\042\uffb2\044\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\052\uffb2\055\uffb2\057\uffb2\001\002\000\026" +
    "\040\uffa9\041\uffa9\042\uffa9\044\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\052\uffa9\055\uffa9\057\uffa9\001\002\000\004\057\123" +
    "\001\002\000\070\004\uff90\005\uff90\006\uff90\007\uff90\010" +
    "\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\040\uff90\041\uff90\042\uff90\044" +
    "\uff90\046\uff90\047\uff90\050\uff90\052\uff90\055\uff90\056\uff90" +
    "\057\uff90\060\uff90\061\uff90\001\002\000\074\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\040" +
    "\uff92\041\uff92\042\uff92\044\uff92\046\uff92\047\uff92\050\uff92" +
    "\052\uff92\053\125\054\126\055\uff92\056\uff92\057\uff92\060" +
    "\uff92\061\uff92\001\002\000\004\060\131\001\002\000\044" +
    "\004\034\005\052\006\030\007\046\010\031\012\054\013" +
    "\055\014\033\015\042\016\041\017\051\020\035\021\032" +
    "\022\036\056\040\060\037\061\044\001\002\000\004\055" +
    "\130\001\002\000\076\004\uff8d\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\044\uff8d\046\uff8d\047\uff8d\050\uff8d\052\uff8d\053" +
    "\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d" +
    "\001\002\000\076\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\044\uff8e\046\uff8e\047\uff8e\050\uff8e\052\uff8e\053\uff8e" +
    "\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\001" +
    "\002\000\070\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f" +
    "\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\021\uff8f\022\uff8f\040\uff8f\041\uff8f\042\uff8f\044\uff8f" +
    "\046\uff8f\047\uff8f\050\uff8f\052\uff8f\055\uff8f\056\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\001\002\000\070\004\uff9e\005\uff9e" +
    "\006\070\007\065\010\066\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\020\uff9e\021\064\022\036\040\uff9e" +
    "\041\uff9e\042\uff9e\044\uff9e\046\uff9e\047\uff9e\050\uff9e\052" +
    "\uff9e\055\uff9e\056\040\057\uff9e\060\037\061\044\001\002" +
    "\000\050\004\060\005\061\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\062\040\uffa6\041\uffa6\042\uffa6" +
    "\044\uffa6\046\uffa6\047\uffa6\050\uffa6\052\uffa6\055\uffa6\057" +
    "\uffa6\001\002\000\026\040\uffaf\041\uffaf\042\uffaf\044\uffaf" +
    "\046\uffaf\047\uffaf\050\uffaf\052\uffaf\055\uffaf\057\uffaf\001" +
    "\002\000\070\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94" +
    "\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\040\uff94\041\uff94\042\uff94\044\uff94" +
    "\046\uff94\047\uff94\050\uff94\052\uff94\055\uff94\056\uff94\057" +
    "\uff94\060\uff94\061\uff94\001\002\000\070\004\uff96\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\040\uff96" +
    "\041\uff96\042\uff96\044\uff96\046\uff96\047\uff96\050\uff96\052" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\001\002" +
    "\000\070\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\040\uff9a\041\uff9a\042\uff9a\044\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\052\uff9a\055\uff9a\056\uff9a\057\uff9a" +
    "\060\uff9a\061\uff9a\001\002\000\014\035\ufff6\036\ufff6\045" +
    "\ufff6\046\ufff6\060\ufff6\001\002\000\006\046\uffdd\050\uffdd" +
    "\001\002\000\006\051\152\052\151\001\002\000\006\051" +
    "\uffd9\052\uffd9\001\002\000\006\046\147\050\146\001\002" +
    "\000\010\046\uffdb\050\uffdb\060\144\001\002\000\010\046" +
    "\uffdf\050\uffdf\057\uffdf\001\002\000\006\046\uffde\050\uffde" +
    "\001\002\000\004\060\154\001\002\000\014\023\021\024" +
    "\026\030\020\031\027\060\023\001\002\000\006\046\uffdc" +
    "\050\uffdc\001\002\000\006\051\uffd8\052\uffd8\001\002\000" +
    "\010\036\uffef\045\uffef\046\uffef\001\002\000\012\036\ufff1" +
    "\045\ufff1\046\ufff1\060\ufff1\001\002\000\012\036\ufff4\045" +
    "\ufff4\046\ufff4\060\144\001\002\000\006\051\161\052\151" +
    "\001\002\000\014\023\021\024\026\030\020\031\027\060" +
    "\023\001\002\000\004\050\163\001\002\000\012\036\ufff2" +
    "\045\ufff2\046\ufff2\060\ufff2\001\002\000\010\036\165\045" +
    "\ufffd\046\ufffd\001\002\000\004\060\265\001\002\000\004" +
    "\050\167\001\002\000\016\033\010\034\ufffb\035\ufffb\036" +
    "\ufffb\045\ufffb\046\ufffb\001\002\000\006\045\173\046\ufffe" +
    "\001\002\000\004\050\172\001\002\000\010\036\ufff0\045" +
    "\ufff0\046\ufff0\001\002\000\022\025\177\026\206\027\202" +
    "\037\204\043\200\046\uffd0\050\uffd0\060\207\001\002\000" +
    "\004\046\175\001\002\000\004\060\176\001\002\000\004" +
    "\050\uffed\001\002\000\044\004\034\005\052\006\030\007" +
    "\046\010\031\012\054\013\055\014\033\015\042\016\041" +
    "\017\051\020\035\021\032\022\036\056\257\060\037\061" +
    "\044\001\002\000\044\004\034\005\052\006\030\007\046" +
    "\010\031\012\054\013\055\014\033\015\042\016\041\017" +
    "\051\020\035\021\032\022\036\056\040\060\037\061\044" +
    "\001\002\000\012\041\uffd5\042\uffd5\046\uffd5\050\uffd5\001" +
    "\002\000\012\041\uffc1\042\uffc1\046\uffc1\050\uffc1\001\002" +
    "\000\012\041\uffd1\042\uffd1\046\uffd1\050\uffd1\001\002\000" +
    "\044\004\034\005\052\006\030\007\046\010\031\012\054" +
    "\013\055\014\033\015\042\016\041\017\051\020\035\021" +
    "\032\022\036\056\040\060\037\061\044\001\002\000\012" +
    "\041\uffd7\042\uffd7\046\uffd7\050\uffd7\001\002\000\044\004" +
    "\034\005\052\006\030\007\046\010\031\012\054\013\055" +
    "\014\033\015\042\016\041\017\051\020\035\021\032\022" +
    "\036\056\231\060\037\061\044\001\002\000\012\011\uff8c" +
    "\053\uff8c\054\uff8c\056\220\001\002\000\012\041\uffd4\042" +
    "\uffd4\046\uffd4\050\uffd4\001\002\000\012\041\uffd2\042\uffd2" +
    "\046\uffd2\050\uffd2\001\002\000\012\041\uffd3\042\uffd3\046" +
    "\uffd3\050\uffd3\001\002\000\006\046\uffff\050\214\001\002" +
    "\000\026\025\177\026\206\027\202\037\204\041\uffd0\042" +
    "\uffd0\043\200\046\uffd0\050\uffd0\060\207\001\002\000\012" +
    "\041\uffd6\042\uffd6\046\uffd6\050\uffd6\001\002\000\010\011" +
    "\227\053\125\054\126\001\002\000\012\041\uffc0\042\uffc0" +
    "\046\uffc0\050\uffc0\001\002\000\046\004\034\005\052\006" +
    "\030\007\046\010\031\012\054\013\055\014\033\015\042" +
    "\016\041\017\051\020\035\021\032\022\036\056\040\057" +
    "\221\060\037\061\044\001\002\000\012\041\uffbe\042\uffbe" +
    "\046\uffbe\050\uffbe\001\002\000\006\052\uffbd\057\uffbd\001" +
    "\002\000\006\052\224\057\225\001\002\000\044\004\034" +
    "\005\052\006\030\007\046\010\031\012\054\013\055\014" +
    "\033\015\042\016\041\017\051\020\035\021\032\022\036" +
    "\056\040\060\037\061\044\001\002\000\012\041\uffbf\042" +
    "\uffbf\046\uffbf\050\uffbf\001\002\000\006\052\uffbc\057\uffbc" +
    "\001\002\000\044\004\034\005\052\006\030\007\046\010" +
    "\031\012\054\013\055\014\033\015\042\016\041\017\051" +
    "\020\035\021\032\022\036\056\040\060\037\061\044\001" +
    "\002\000\012\041\uffbb\042\uffbb\046\uffbb\050\uffbb\001\002" +
    "\000\046\004\034\005\052\006\030\007\046\010\031\012" +
    "\054\013\055\014\033\015\042\016\041\017\051\020\035" +
    "\021\032\022\036\056\040\057\234\060\037\061\044\001" +
    "\002\000\004\057\233\001\002\000\012\041\uffc6\042\uffc6" +
    "\046\uffc6\050\uffc6\001\002\000\012\041\uffc4\042\uffc4\046" +
    "\uffc4\050\uffc4\001\002\000\014\041\uffc3\042\uffc3\046\uffc3" +
    "\050\uffc3\057\236\001\002\000\056\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\041\uffc2\042" +
    "\uffc2\046\uffc2\050\uffc2\056\uff90\057\uff90\060\uff90\061\uff90" +
    "\001\002\000\004\040\240\001\002\000\026\025\177\026" +
    "\206\027\202\037\204\041\uffd0\042\uffd0\043\200\046\uffd0" +
    "\050\uffd0\060\207\001\002\000\012\041\uffcc\042\uffcc\046" +
    "\uffcc\050\214\001\002\000\010\041\244\042\243\046\uffca" +
    "\001\002\000\022\025\177\026\206\027\202\037\204\043" +
    "\200\046\uffd0\050\uffd0\060\207\001\002\000\044\004\034" +
    "\005\052\006\030\007\046\010\031\012\054\013\055\014" +
    "\033\015\042\016\041\017\051\020\035\021\032\022\036" +
    "\056\040\060\037\061\044\001\002\000\004\046\246\001" +
    "\002\000\012\041\uffce\042\uffce\046\uffce\050\uffce\001\002" +
    "\000\004\040\250\001\002\000\026\025\177\026\206\027" +
    "\202\037\204\041\uffd0\042\uffd0\043\200\046\uffd0\050\uffd0" +
    "\060\207\001\002\000\012\041\uffcd\042\uffcd\046\uffcd\050" +
    "\214\001\002\000\006\046\uffcb\050\214\001\002\000\004" +
    "\044\254\001\002\000\022\025\177\026\206\027\202\037" +
    "\204\043\200\046\uffd0\050\uffd0\060\207\001\002\000\006" +
    "\046\256\050\214\001\002\000\012\041\uffcf\042\uffcf\046" +
    "\uffcf\050\uffcf\001\002\000\046\004\034\005\052\006\030" +
    "\007\046\010\031\012\054\013\055\014\033\015\042\016" +
    "\041\017\051\020\035\021\032\022\036\056\040\057\262" +
    "\060\037\061\044\001\002\000\004\057\261\001\002\000" +
    "\012\041\uffc8\042\uffc8\046\uffc8\050\uffc8\001\002\000\012" +
    "\041\uffc5\042\uffc5\046\uffc5\050\uffc5\001\002\000\014\041" +
    "\uffc7\042\uffc7\046\uffc7\050\uffc7\057\264\001\002\000\056" +
    "\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90" +
    "\022\uff90\041\uffc9\042\uffc9\046\uffc9\050\uffc9\056\uff90\057" +
    "\uff90\060\uff90\061\uff90\001\002\000\006\050\uffea\056\267" +
    "\001\002\000\004\050\uffee\001\002\000\010\035\270\057" +
    "\271\060\uffe5\001\002\000\004\060\uffe6\001\002\000\004" +
    "\050\uffeb\001\002\000\006\050\uffe8\057\uffe8\001\002\000" +
    "\006\050\301\057\300\001\002\000\004\060\144\001\002" +
    "\000\006\051\276\052\151\001\002\000\014\023\021\024" +
    "\026\030\020\031\027\060\023\001\002\000\006\050\uffe7" +
    "\057\uffe7\001\002\000\004\050\uffec\001\002\000\006\035" +
    "\270\060\uffe5\001\002\000\006\050\uffe9\057\uffe9\001\002" +
    "\000\004\046\304\001\002\000\004\060\305\001\002\000" +
    "\004\053\306\001\002\000\004\002\001\001\002\000\016" +
    "\034\ufffc\035\ufffc\036\ufffc\045\ufffc\046\ufffc\060\310\001" +
    "\002\000\004\012\311\001\002\000\044\004\034\005\052" +
    "\006\030\007\046\010\031\012\054\013\055\014\033\015" +
    "\042\016\041\017\051\020\035\021\032\022\036\056\040" +
    "\060\037\061\044\001\002\000\004\050\313\001\002\000" +
    "\016\034\ufffa\035\ufffa\036\ufffa\045\ufffa\046\ufffa\060\ufffa" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\010\005\011" +
    "\001\001\000\004\006\306\001\001\000\004\003\302\001" +
    "\001\000\004\007\012\001\001\000\004\011\154\001\001" +
    "\000\004\010\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\035\021\036\024\037\023\001\001\000\010" +
    "\016\144\017\141\031\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\042\042\044\047\045" +
    "\052\046\046\047\044\001\001\000\004\047\137\001\001" +
    "\000\004\047\136\001\001\000\004\047\135\001\001\000" +
    "\012\044\134\045\052\046\046\047\044\001\001\000\010" +
    "\045\133\046\046\047\044\001\001\000\006\046\132\047" +
    "\044\001\001\000\004\047\131\001\001\000\004\050\123" +
    "\001\001\000\014\042\121\044\047\045\052\046\046\047" +
    "\044\001\001\000\012\044\120\045\052\046\046\047\044" +
    "\001\001\000\012\044\117\045\052\046\046\047\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\114\001\001\000\004\047\066\001\001\000" +
    "\002\001\001\000\012\044\077\045\052\046\046\047\044" +
    "\001\001\000\010\045\076\046\046\047\044\001\001\000" +
    "\002\001\001\000\012\044\056\045\052\046\046\047\044" +
    "\001\001\000\012\044\055\045\052\046\046\047\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\075" +
    "\047\044\001\001\000\006\046\074\047\044\001\001\000" +
    "\006\046\062\047\044\001\001\000\004\047\066\001\001" +
    "\000\004\047\073\001\001\000\004\047\072\001\001\000" +
    "\004\047\071\001\001\000\002\001\001\000\004\047\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\066\001\001\000\004" +
    "\047\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\044\113\045\052\046\046\047\044\001\001\000\012" +
    "\044\112\045\052\046\046\047\044\001\001\000\012\044" +
    "\111\045\052\046\046\047\044\001\001\000\012\044\110" +
    "\045\052\046\046\047\044\001\001\000\012\044\107\045" +
    "\052\046\046\047\044\001\001\000\012\044\106\045\052" +
    "\046\046\047\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\035\116\036" +
    "\024\037\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\042\126\044\047" +
    "\045\052\046\046\047\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\147\031\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\035\152\036\024\037\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\163\001\001\000\004\012" +
    "\156\001\001\000\004\031\157\001\001\000\002\001\001" +
    "\000\010\035\161\036\024\037\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\167\005\011\014" +
    "\170\001\001\000\004\003\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\212\021\204\022\210\023" +
    "\211\025\207\026\200\030\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\257\044" +
    "\047\045\052\046\046\047\044\001\001\000\014\042\252" +
    "\044\047\045\052\046\046\047\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\042\236" +
    "\044\047\045\052\046\046\047\044\001\001\000\002\001" +
    "\001\000\014\042\231\044\047\045\052\046\046\047\044" +
    "\001\001\000\006\041\216\050\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\021\214\022\210\023\211\025\207\026\200\030" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\042\221\043\222\044\047\045\052\046" +
    "\046\047\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\225\044\047\045\052\046" +
    "\046\047\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\042\227\044\047\045\052\046\046\047\044\001" +
    "\001\000\002\001\001\000\014\042\234\044\047\045\052" +
    "\046\046\047\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\240\021\204\022\210\023" +
    "\211\025\207\026\200\030\202\001\001\000\004\024\241" +
    "\001\001\000\004\027\244\001\001\000\020\020\251\021" +
    "\204\022\210\023\211\025\207\026\200\030\202\001\001" +
    "\000\014\042\246\044\047\045\052\046\046\047\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\020\250\021\204\022\210\023\211\025\207\026" +
    "\200\030\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\020\254\021\204\022\210\023" +
    "\211\025\207\026\200\030\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\262\044\047\045\052\046" +
    "\046\047\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\265\001\001\000\002\001\001\000\010\015\273" +
    "\034\271\040\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\274" +
    "\001\001\000\002\001\001\000\010\035\276\036\024\037" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\273\034\301\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\042\311\044" +
    "\047\045\052\046\046\047\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
	idType_map = new HashMap();
	id_v= new Vector<String>();
	proCall_id_record = new Vector<Vector<String>>();
	proCall_ap_record = new Vector<Vector<String>>();
	procedure_ids = new Vector<String>();
	graph = new CallGraph();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	return getScanner().next_token(); 

    }


	public CallGraph graph;
	public Vector<String> id_v;
	public Map idType_map;
	public Vector<Vector<String>> proCall_id_record;
	public Vector<Vector<String>> proCall_ap_record;
	public Vector<String> procedure_ids;
	public int get_pos_form_id(String id) throws SemanticException{
		for (int i = 0; i < procedure_ids.size(); i++) {
			if (procedure_ids.elementAt(i).equals(id)) return i;
		}
		throw new SemanticException(id +" has no declaration!");
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // module_block ::= MODULE IDENTIFIER SEMI declarations begin_block END IDENTIFIER PERIOD 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		for (int i = 0; i < proCall_id_record.size(); i++) {
			for (int j = 0; j < proCall_id_record.elementAt(i).size(); j++){
				parser.graph.addCallSite(procedure_ids.elementAt(i) + (j + 1), 
					procedure_ids.elementAt(i) + "()", 
					proCall_id_record.elementAt(i).elementAt(j) + proCall_ap_record.elementAt(i).elementAt(j));
				parser.graph.addEdge(procedure_ids.elementAt(i) + (j + 1), proCall_id_record.elementAt(i).elementAt(j));
			}
		}
		parser.graph.show();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= module_block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin_block ::= BEGIN statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= const_declare type_declare var_declare procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_declare ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_list ::= const_list IDENTIFIER EQ expression SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declare ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_list ::= type_list IDENTIFIER EQ type SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_declare ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_list ::= var_list identifier_list COLON type SEMI 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		for (int i = 0; i < id_v.size(); i++){
			idType_map.put(id_v.elementAt(i), t.toString());
		}
		id_v.clear();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedure_declaration ::= procedure_declaration procedure_heading SEMI procedure_body SEMI 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (id1.toString().equals(id2.toString()) == false)
			throw new ProcedureNameMismatchedException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedure_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id;
		parser.graph.addProcedure(id, id + "(" + fp.toString() + ")");
		procedure_ids.addElement(id.toString());
		proCall_id_record.addElement(new Vector<String>());
		proCall_ap_record.addElement(new Vector<String>());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_body ::= declarations begin_block END IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formal_parameters ::= LPAREN fp_section_list RPAREN 
            {
              String RESULT =null;
		int fp_s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fp_s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fp_s_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = fp_s_l.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_parameters ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
		RESULT = "";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_parameters ::= 
            {
              String RESULT =null;
		
		RESULT = "";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fp_section_list ::= fp_section_list SEMI fp_section 
            {
              String RESULT =null;
		int fp_s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fp_s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fp_s_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fp_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fp_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp_s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = fp_s_l.toString() + ", " + fp_s.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fp_section_list ::= fp_section 
            {
              String RESULT =null;
		int fp_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fp_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp_s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = fp_s.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section_list",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fp_section ::= var_if identifier_list COLON type 
            {
              String RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = "";
		String temp = t.toString();
		for (int i = 0; i < id_list.intValue(); i++) {
			RESULT += temp;
			if (i != id_list.intValue() - 1) RESULT += ", ";
		}
		id_v.clear();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_if ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= array_type 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = at.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= record_type 
            {
              String RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = rt.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= INTEGER 
            {
              String RESULT =null;
		
		RESULT = "INTEGER";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= BOOLEAN 
            {
              String RESULT =null;
		
		RESULT = "BOOLEAN";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // record_type ::= RECORD field_list END 
            {
              String RESULT =null;
		
		RESULT = "RECORD";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_list ::= field_list SEMI field_one 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_list ::= field_one 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // field_one ::= identifier_list COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // field_one ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // array_type ::= ARRAY expression OF type 
            {
              String RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t.toString() + "[" + ex.toString() + "]";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identifier_list ::= IDENTIFIER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		id_v.addElement(id.toString());
		RESULT = new Integer(1);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              Integer RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		id_v.addElement(id.toString());
		RESULT = id_list.intValue() + 1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement_sequence ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement_sequence ::= statement_sequence SEMI statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= procedure_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= rw_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elsif_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // else_statement ::= ELSE statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rw_statement ::= READ LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rw_statement ::= READ expression RPAREN 
            {
              Object RESULT =null;
			
			if (true) throw new MissingLeftParenthesisException();	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rw_statement ::= READ LPAREN expression 
            {
              Object RESULT =null;
			
			if (true) throw new MissingRightParenthesisException();	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rw_statement ::= WRITE expression RPAREN 
            {
              Object RESULT =null;
			
			if (true) throw new MissingLeftParenthesisException();	
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rw_statement ::= READ LPAREN RPAREN 
            {
              Object RESULT =null;
		
			if (true) throw new MissingOperatorException();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rw_statement ::= WRITE LPAREN RPAREN 
            {
              Object RESULT =null;
		
			if (true) throw new MissingOperatorException();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rw_statement ::= WRITE LPAREN expression 
            {
              Object RESULT =null;
			
			if (true) throw new MissingRightParenthesisException();
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rw_statement ::= WRITE LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rw_statement ::= WRITELN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rw_statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ap = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		proCall_id_record.elementAt(proCall_id_record.size() - 1).addElement(id.toString());
		proCall_ap_record.elementAt(proCall_ap_record.size() - 1).addElement(ap.toString());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // actual_parameters ::= LPAREN expression_list RPAREN 
            {
              String RESULT =null;
		int ex_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ex_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ex_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = "(" + ex_l.toString() + ")";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // actual_parameters ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
		RESULT = "()";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_list ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = e.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_list ::= expression_list COMMA expression 
            {
              String RESULT =null;
		int ex_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ex_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = ex_l.toString() + "," + e.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (idType_map.get(id.toString()).equals("BOOLEAN")) {
			if (idType_map.get(e.toString()) == null) {
				throw new TypeMismatchedException();
			}
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= simple_expression EQ simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = se1.toString() + " = " + se2.toString();
		idType_map.put(se1.toString() + " = " + se2.toString(), "BOOLEAN");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= simple_expression EQ 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= EQ simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= simple_expression NEQ simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = se1.toString() + " # " + se2.toString();
		idType_map.put(se1.toString() + " # " + se2.toString(), "BOOLEAN");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= simple_expression NEQ 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= NEQ simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= simple_expression LE simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = se1.toString() + " <= " + se2.toString();
		idType_map.put(se1.toString() + " <= " + se2.toString(), "BOOLEAN");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= simple_expression LE 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= LE simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= simple_expression LT simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = se1.toString() + " < " + se2.toString();
		idType_map.put(se1.toString() + " < " + se2.toString(), "BOOLEAN");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= simple_expression LT 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= LT simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= simple_expression GE simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = se1.toString() + " >= " + se2.toString();
		idType_map.put(se1.toString() + " >= " + se2.toString(), "BOOLEAN");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= simple_expression GE 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= GE simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= simple_expression GT simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = se1.toString() + " > " + se2.toString();
		idType_map.put(se1.toString() + " > " + se2.toString(), "BOOLEAN");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= simple_expression GT 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= GT simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= simple_expression 
            {
              String RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = se1.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_expression ::= term_list 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t_l.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_expression ::= PLUS term_list 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t_l.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_expression ::= MINUS term_list 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = "-" + t_l.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // term_list ::= term_list PLUS term 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t_l.toString() + " + " + t.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // term_list ::= term_list PLUS 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // term_list ::= term_list MINUS term 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t_l.toString() + " - " + t.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // term_list ::= term_list MINUS 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term_list ::= term_list OR term 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t_l.toString() + " OR " + t.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // term_list ::= term_list OR 
            {
              String RESULT =null;
		int t_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // term_list ::= OR term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // term_list ::= term 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // term ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = f.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // term ::= term TIMES factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t.toString() +  " * " + f.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // term ::= TIMES factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= term DIVIDE factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t.toString() +  " DIV " + f.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // term ::= DIVIDE factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // term ::= term MOD factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t.toString() +  " MOD " + f.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // term ::= MOD factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // term ::= term AND factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t.toString() +  " & " + f.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // term ::= AND factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperandException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term ::= term factor 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		if (true) throw new MissingOperatorException();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= IDENTIFIER selector 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id.toString() + se.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= NUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = n.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= LPAREN expression RPAREN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = e.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor ::= NOT factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = "~" + f.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // selector ::= selector PERIOD IDENTIFIER 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = se.toString() + "." + id.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // selector ::= selector LBRACKET expression RBRACKET 
            {
              String RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String se = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = se.toString() + "["+ e.toString() +"]";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // selector ::= 
            {
              String RESULT =null;
		
		RESULT = "";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
