/* The following code was generated by JFlex 1.4.1 on 12/13/17 1:39 PM */

/* oberon.flex */
/* --------------------------Usercode Section------------------------ */

import java.io.*;
import exceptions.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 12/13/17 1:39 PM from the specification file
 * <tt>oberon.flex</tt>
 */
public class OberonScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\37\1\44\1\43\1\46\1\0\1\43\1\45\16\37\4\0\1\33"+
    "\2\0\1\1\1\36\1\0\1\1\1\0\1\12\1\13\1\2\1\1"+
    "\1\35\1\1\1\1\1\0\1\41\7\42\2\40\1\10\1\35\1\10"+
    "\1\11\1\10\2\0\1\30\1\25\1\27\1\3\1\20\1\15\1\26"+
    "\1\17\1\4\2\36\1\22\1\6\1\21\1\7\1\34\1\36\1\14"+
    "\1\23\1\16\1\32\1\5\1\24\1\36\1\31\1\36\1\1\1\0"+
    "\1\1\1\0\1\36\1\0\1\30\1\25\1\27\1\3\1\20\1\15"+
    "\1\26\1\17\1\4\2\36\1\22\1\6\1\21\1\7\1\34\1\36"+
    "\1\14\1\23\1\16\1\32\1\5\1\24\1\36\1\31\1\36\1\0"+
    "\1\47\1\0\1\1\41\37\2\0\4\36\4\0\1\36\2\0\1\37"+
    "\7\0\1\36\4\0\1\36\5\0\27\36\1\0\37\36\1\0\u01ca\36"+
    "\4\0\14\36\16\0\5\36\7\0\1\36\1\0\1\36\21\0\160\37"+
    "\5\36\1\0\2\36\2\0\4\36\10\0\1\36\1\0\3\36\1\0"+
    "\1\36\1\0\24\36\1\0\123\36\1\0\213\36\1\0\5\37\2\0"+
    "\236\36\11\0\46\36\2\0\1\36\7\0\47\36\7\0\1\36\1\0"+
    "\55\37\1\0\1\37\1\0\2\37\1\0\2\37\1\0\1\37\10\0"+
    "\33\36\5\0\3\36\15\0\5\37\6\0\1\36\4\0\13\37\5\0"+
    "\53\36\37\37\4\0\2\36\1\37\143\36\1\0\1\36\10\37\1\0"+
    "\6\37\2\36\2\37\1\0\4\37\2\36\12\37\3\36\2\0\1\36"+
    "\17\0\1\37\1\36\1\37\36\36\33\37\2\0\131\36\13\37\1\36"+
    "\16\0\12\37\41\36\11\37\2\36\4\0\1\36\5\0\26\36\4\37"+
    "\1\36\11\37\1\36\3\37\1\36\5\37\22\0\31\36\3\37\104\0"+
    "\1\36\1\0\13\36\67\0\33\37\1\0\4\37\66\36\3\37\1\36"+
    "\22\37\1\36\7\37\12\36\2\37\2\0\12\37\1\0\7\36\1\0"+
    "\7\36\1\0\3\37\1\0\10\36\2\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\1\36\3\0\4\36\2\0\1\37\1\36\7\37\2\0"+
    "\2\37\2\0\3\37\1\36\10\0\1\37\4\0\2\36\1\0\3\36"+
    "\2\37\2\0\12\37\4\36\7\0\1\36\5\0\3\37\1\0\6\36"+
    "\4\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\2\36"+
    "\1\0\2\36\2\0\1\37\1\0\5\37\4\0\2\37\2\0\3\37"+
    "\3\0\1\37\7\0\4\36\1\0\1\36\7\0\14\37\3\36\1\37"+
    "\13\0\3\37\1\0\11\36\1\0\3\36\1\0\26\36\1\0\7\36"+
    "\1\0\2\36\1\0\5\36\2\0\1\37\1\36\10\37\1\0\3\37"+
    "\1\0\3\37\2\0\1\36\17\0\2\36\2\37\2\0\12\37\1\0"+
    "\1\36\17\0\3\37\1\0\10\36\2\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\2\36\1\0\5\36\2\0\1\37\1\36\7\37\2\0"+
    "\2\37\2\0\3\37\10\0\2\37\4\0\2\36\1\0\3\36\2\37"+
    "\2\0\12\37\1\0\1\36\20\0\1\37\1\36\1\0\6\36\3\0"+
    "\3\36\1\0\4\36\3\0\2\36\1\0\1\36\1\0\2\36\3\0"+
    "\2\36\3\0\3\36\3\0\14\36\4\0\5\37\3\0\3\37\1\0"+
    "\4\37\2\0\1\36\6\0\1\37\16\0\12\37\11\0\1\36\7\0"+
    "\3\37\1\0\10\36\1\0\3\36\1\0\27\36\1\0\12\36\1\0"+
    "\5\36\3\0\1\36\7\37\1\0\3\37\1\0\4\37\7\0\2\37"+
    "\1\0\2\36\6\0\2\36\2\37\2\0\12\37\22\0\2\37\1\0"+
    "\10\36\1\0\3\36\1\0\27\36\1\0\12\36\1\0\5\36\2\0"+
    "\1\37\1\36\7\37\1\0\3\37\1\0\4\37\7\0\2\37\7\0"+
    "\1\36\1\0\2\36\2\37\2\0\12\37\1\0\2\36\17\0\2\37"+
    "\1\0\10\36\1\0\3\36\1\0\51\36\2\0\1\36\7\37\1\0"+
    "\3\37\1\0\4\37\1\36\10\0\1\37\10\0\2\36\2\37\2\0"+
    "\12\37\12\0\6\36\2\0\2\37\1\0\22\36\3\0\30\36\1\0"+
    "\11\36\1\0\1\36\2\0\7\36\3\0\1\37\4\0\6\37\1\0"+
    "\1\37\1\0\10\37\22\0\2\37\15\0\60\36\1\37\2\36\7\37"+
    "\4\0\10\36\10\37\1\0\12\37\47\0\2\36\1\0\1\36\2\0"+
    "\2\36\1\0\1\36\2\0\1\36\6\0\4\36\1\0\7\36\1\0"+
    "\3\36\1\0\1\36\1\0\1\36\2\0\2\36\1\0\4\36\1\37"+
    "\2\36\6\37\1\0\2\37\1\36\2\0\5\36\1\0\1\36\1\0"+
    "\6\37\2\0\12\37\2\0\4\36\40\0\1\36\27\0\2\37\6\0"+
    "\12\37\13\0\1\37\1\0\1\37\1\0\1\37\4\0\2\37\10\36"+
    "\1\0\44\36\4\0\24\37\1\0\2\37\5\36\13\37\1\0\44\37"+
    "\11\0\1\37\71\0\53\36\24\37\1\36\12\37\6\0\6\36\4\37"+
    "\4\36\3\37\1\36\3\37\2\36\7\37\3\36\4\37\15\36\14\37"+
    "\1\36\17\37\2\0\46\36\1\0\1\36\5\0\1\36\2\0\53\36"+
    "\1\0\u014d\36\1\0\4\36\2\0\7\36\1\0\1\36\1\0\4\36"+
    "\2\0\51\36\1\0\4\36\2\0\41\36\1\0\4\36\2\0\7\36"+
    "\1\0\1\36\1\0\4\36\2\0\17\36\1\0\71\36\1\0\4\36"+
    "\2\0\103\36\2\0\3\37\40\0\20\36\20\0\125\36\14\0\u026c\36"+
    "\2\0\21\36\1\0\32\36\5\0\113\36\3\0\3\36\17\0\15\36"+
    "\1\0\4\36\3\37\13\0\22\36\3\37\13\0\22\36\2\37\14\0"+
    "\15\36\1\0\3\36\1\0\2\37\14\0\64\36\40\37\3\0\1\36"+
    "\3\0\2\36\1\37\2\0\12\37\41\0\3\37\2\0\12\37\6\0"+
    "\130\36\10\0\51\36\1\37\1\36\5\0\106\36\12\0\35\36\3\0"+
    "\14\37\4\0\14\37\12\0\12\37\36\36\2\0\5\36\13\0\54\36"+
    "\4\0\21\37\7\36\2\37\6\0\12\37\46\0\27\36\5\37\4\0"+
    "\65\36\12\37\1\0\35\37\2\0\13\37\6\0\12\37\15\0\1\36"+
    "\130\0\5\37\57\36\21\37\7\36\4\0\12\37\21\0\11\37\14\0"+
    "\3\37\36\36\15\37\2\36\12\37\54\36\16\37\14\0\44\36\24\37"+
    "\10\0\12\37\3\0\3\36\12\37\44\36\122\0\3\37\1\0\25\37"+
    "\4\36\1\37\4\36\3\37\2\36\11\0\300\36\47\37\25\0\4\37"+
    "\u0116\36\2\0\6\36\2\0\46\36\2\0\6\36\2\0\10\36\1\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\0\37\36\2\0\65\36\1\0"+
    "\7\36\1\0\1\36\3\0\3\36\1\0\7\36\3\0\4\36\2\0"+
    "\6\36\4\0\15\36\5\0\3\36\1\0\7\36\16\0\5\37\32\0"+
    "\5\37\20\0\2\36\23\0\1\36\13\0\5\37\5\0\6\37\1\0"+
    "\1\36\15\0\1\36\20\0\15\36\3\0\33\36\25\0\15\37\4\0"+
    "\1\37\3\0\14\37\21\0\1\36\4\0\1\36\2\0\12\36\1\0"+
    "\1\36\3\0\5\36\6\0\1\36\1\0\1\36\1\0\1\36\1\0"+
    "\4\36\1\0\13\36\2\0\4\36\5\0\5\36\4\0\1\36\21\0"+
    "\51\36\u0a77\0\57\36\1\0\57\36\1\0\205\36\6\0\4\36\3\37"+
    "\2\36\14\0\46\36\1\0\1\36\5\0\1\36\2\0\70\36\7\0"+
    "\1\36\17\0\1\37\27\36\11\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\40\37\57\0\1\36\u01d5\0\3\36\31\0\11\36\6\37\1\0"+
    "\5\36\2\0\5\36\4\0\126\36\2\0\2\37\2\0\3\36\1\0"+
    "\132\36\1\0\4\36\5\0\51\36\3\0\136\36\21\0\33\36\65\0"+
    "\20\36\u0200\0\u19b6\36\112\0\u51cd\36\63\0\u048d\36\103\0\56\36\2\0"+
    "\u010d\36\3\0\20\36\12\37\2\36\24\0\57\36\1\37\4\0\12\37"+
    "\1\0\31\36\7\0\1\37\120\36\2\37\45\0\11\36\2\0\147\36"+
    "\2\0\4\36\1\0\4\36\14\0\13\36\115\0\12\36\1\37\3\36"+
    "\1\37\4\36\1\37\27\36\5\37\20\0\1\36\7\0\64\36\14\0"+
    "\2\37\62\36\21\37\13\0\12\37\6\0\22\37\6\36\3\0\1\36"+
    "\4\0\12\37\34\36\10\37\2\0\27\36\15\37\14\0\35\36\3\0"+
    "\4\37\57\36\16\37\16\0\1\36\12\37\46\0\51\36\16\37\11\0"+
    "\3\36\1\37\10\36\2\37\2\0\12\37\6\0\27\36\3\0\1\36"+
    "\1\37\4\0\60\36\1\37\1\36\3\37\2\36\2\37\5\36\2\37"+
    "\1\36\1\37\1\36\30\0\3\36\2\0\13\36\5\37\2\0\3\36"+
    "\2\37\12\0\6\36\2\0\6\36\2\0\6\36\11\0\7\36\1\0"+
    "\7\36\221\0\43\36\10\37\1\0\2\37\2\0\12\37\6\0\u2ba4\36"+
    "\14\0\27\36\4\0\61\36\u2104\0\u016e\36\2\0\152\36\46\0\7\36"+
    "\14\0\5\36\5\0\1\36\1\37\12\36\1\0\15\36\1\0\5\36"+
    "\1\0\1\36\1\0\2\36\1\0\2\36\1\0\154\36\41\0\u016b\36"+
    "\22\0\100\36\2\0\66\36\50\0\15\36\3\0\20\37\20\0\7\37"+
    "\14\0\2\36\30\0\3\36\31\0\1\36\6\0\5\36\1\0\207\36"+
    "\2\0\1\37\4\0\1\36\13\0\12\37\7\0\32\36\4\0\1\36"+
    "\1\0\32\36\13\0\131\36\3\0\6\36\2\0\6\36\2\0\6\36"+
    "\2\0\3\36\3\0\2\36\3\0\2\36\22\0\3\37\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\5\3\2\2\10\3\1\4\1\3"+
    "\1\5\2\6\1\4\3\0\1\7\1\3\1\10\3\3"+
    "\1\2\1\7\1\0\14\3\1\11\2\12\1\3\1\2"+
    "\1\0\14\3\2\12\1\3\1\7\1\13\1\3\1\14"+
    "\7\3\1\13\1\14\4\3\1\7\1\0\1\3\1\10"+
    "\1\3\1\7\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[94];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\50\0\120\0\170\0\240\0\310\0\360"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\50\0\u02d0\0\50\0\u02f8\0\u0320"+
    "\0\u0348\0\50\0\120\0\u0370\0\50\0\u0398\0\u01b8\0\u03c0"+
    "\0\u03e8\0\u0410\0\u01b8\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618"+
    "\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758"+
    "\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8"+
    "\0\u0a00\0\u01b8\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0b40"+
    "\0\u0c30\0\u0c58\0\50\0\u0c80\0\u0ca8\0\u0cd0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[94];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\3\1\14\1\15\1\16\1\15"+
    "\1\17\3\15\1\20\1\21\1\15\1\22\1\23\2\15"+
    "\1\24\1\25\1\26\1\15\1\2\1\27\1\30\1\27"+
    "\2\24\1\31\1\24\1\2\2\32\1\33\7\32\1\34"+
    "\37\32\1\33\7\32\1\34\1\35\36\32\1\33\1\15"+
    "\1\36\2\15\1\37\2\32\1\34\1\32\17\15\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\5\32\1\33\5\15"+
    "\2\32\1\34\1\32\1\15\1\37\3\15\1\40\11\15"+
    "\1\32\1\15\1\32\5\15\1\32\1\15\5\32\1\33"+
    "\5\15\2\32\1\34\1\32\14\15\1\41\2\15\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\5\32\1\33\4\15"+
    "\1\42\2\32\1\34\1\32\17\15\1\32\1\15\1\32"+
    "\5\15\1\32\1\15\5\32\1\33\5\15\2\32\1\34"+
    "\1\32\1\43\1\37\15\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\6\32\1\3\1\34\37\32"+
    "\1\44\7\32\1\45\37\32\1\33\5\15\2\32\1\34"+
    "\1\32\4\15\1\46\12\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\5\15\2\32\1\34\1\32"+
    "\17\15\1\32\1\15\1\32\5\15\1\32\1\15\5\32"+
    "\1\33\5\15\2\32\1\34\1\32\3\15\1\47\11\15"+
    "\1\50\1\15\1\32\1\15\1\32\5\15\1\32\1\15"+
    "\5\32\1\33\5\15\2\32\1\34\1\32\5\15\1\51"+
    "\1\52\10\15\1\32\1\15\1\32\5\15\1\32\1\15"+
    "\5\32\1\33\5\15\2\32\1\34\1\32\1\53\2\15"+
    "\1\54\13\15\1\32\1\15\1\32\5\15\1\32\1\15"+
    "\5\32\1\33\4\15\1\55\2\32\1\34\1\32\4\15"+
    "\1\56\12\15\1\32\1\15\1\32\5\15\1\32\1\15"+
    "\5\32\1\33\4\15\1\57\2\32\1\34\1\32\17\15"+
    "\1\32\1\15\1\32\5\15\1\32\1\15\5\32\1\33"+
    "\5\15\2\32\1\34\1\32\1\60\16\15\1\32\1\15"+
    "\1\32\5\15\1\32\1\15\5\32\1\33\5\15\2\32"+
    "\1\34\1\32\1\61\16\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\5\62\2\32\1\34\1\32"+
    "\17\62\1\32\1\62\1\32\1\62\1\32\3\27\7\32"+
    "\1\33\5\62\2\32\1\34\1\32\17\62\1\32\1\62"+
    "\1\32\1\62\1\32\1\63\2\30\4\32\1\64\2\32"+
    "\1\33\7\32\1\34\33\32\1\24\3\32\1\0\7\32"+
    "\1\45\37\32\1\33\2\15\1\43\2\15\2\32\1\34"+
    "\1\32\17\15\1\32\1\15\1\32\5\15\1\32\1\15"+
    "\5\32\1\33\5\15\2\32\1\34\1\32\2\15\1\65"+
    "\14\15\1\32\1\15\1\32\5\15\1\32\1\15\5\32"+
    "\1\33\5\15\2\32\1\34\1\32\1\37\16\15\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\5\32\1\33\1\66"+
    "\4\15\2\32\1\34\1\32\17\15\1\32\1\15\1\32"+
    "\5\15\1\32\1\15\3\32\2\44\1\67\45\44\2\32"+
    "\1\33\7\32\1\45\37\32\1\33\5\15\2\32\1\34"+
    "\1\32\13\15\1\70\1\71\2\15\1\32\1\15\1\32"+
    "\5\15\1\32\1\15\5\32\1\33\5\15\2\32\1\34"+
    "\1\32\4\15\1\72\12\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\5\15\2\32\1\34\1\32"+
    "\17\15\1\32\1\73\1\32\5\15\1\32\1\15\5\32"+
    "\1\33\1\37\4\15\2\32\1\34\1\32\17\15\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\5\32\1\33\5\15"+
    "\2\32\1\34\1\32\7\15\1\74\7\15\1\32\1\15"+
    "\1\32\5\15\1\32\1\15\5\32\1\33\1\15\1\75"+
    "\3\15\2\32\1\34\1\32\17\15\1\32\1\15\1\32"+
    "\5\15\1\32\1\15\5\32\1\33\1\15\1\76\3\15"+
    "\2\32\1\34\1\32\17\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\4\15\1\77\2\32\1\34"+
    "\1\32\17\15\1\32\1\15\1\32\5\15\1\32\1\15"+
    "\5\32\1\33\5\15\2\32\1\34\1\32\12\15\1\100"+
    "\4\15\1\32\1\15\1\32\5\15\1\32\1\15\5\32"+
    "\1\33\5\15\2\32\1\34\1\32\5\15\1\101\11\15"+
    "\1\32\1\15\1\32\5\15\1\32\1\15\5\32\1\33"+
    "\5\15\2\32\1\34\1\32\1\102\16\15\1\32\1\15"+
    "\1\32\5\15\1\32\1\15\5\32\1\33\4\15\1\103"+
    "\2\32\1\34\1\32\17\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\5\62\2\32\1\34\1\32"+
    "\17\62\1\32\1\62\1\32\5\62\1\32\1\62\5\32"+
    "\1\33\5\62\2\32\1\34\1\32\17\62\1\32\1\62"+
    "\1\32\1\62\1\32\1\63\2\104\4\32\1\64\2\32"+
    "\1\33\7\32\1\34\25\32\1\64\2\105\4\32\1\64"+
    "\2\32\1\33\5\15\2\32\1\34\1\32\4\15\1\106"+
    "\12\15\1\32\1\15\1\32\5\15\1\32\1\15\5\32"+
    "\1\33\5\15\2\32\1\34\1\32\16\15\1\76\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\3\32\2\44\1\107"+
    "\10\44\1\110\34\44\2\32\1\33\4\15\1\111\2\32"+
    "\1\34\1\32\17\15\1\32\1\15\1\32\5\15\1\32"+
    "\1\15\5\32\1\33\1\112\4\15\2\32\1\34\1\32"+
    "\17\15\1\32\1\15\1\32\5\15\1\32\1\15\5\32"+
    "\1\33\5\15\2\32\1\34\1\32\5\15\1\37\11\15"+
    "\1\32\1\15\1\32\5\15\1\32\1\15\5\32\1\33"+
    "\5\15\2\32\1\34\1\32\4\15\1\37\12\15\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\5\32\1\33\1\15"+
    "\1\113\3\15\2\32\1\34\1\32\4\15\1\37\12\15"+
    "\1\32\1\15\1\32\5\15\1\32\1\15\5\32\1\33"+
    "\5\15\2\32\1\34\1\32\2\15\1\114\14\15\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\5\32\1\33\5\15"+
    "\2\32\1\34\1\32\6\15\1\73\10\15\1\32\1\15"+
    "\1\32\5\15\1\32\1\15\5\32\1\33\5\15\2\32"+
    "\1\34\1\32\6\15\1\115\10\15\1\32\1\15\1\32"+
    "\5\15\1\32\1\15\5\32\1\33\1\15\1\72\3\15"+
    "\2\32\1\34\1\32\17\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\5\15\2\32\1\34\1\32"+
    "\7\15\1\116\7\15\1\32\1\15\1\32\5\15\1\32"+
    "\1\15\5\32\1\33\5\15\2\32\1\34\1\32\14\15"+
    "\1\117\2\15\1\32\1\15\1\32\5\15\1\32\1\15"+
    "\5\32\1\33\5\15\2\32\1\34\1\32\13\15\1\120"+
    "\3\15\1\32\1\15\1\32\5\15\1\32\1\15\5\32"+
    "\1\33\5\62\2\32\1\34\1\32\17\62\1\32\1\62"+
    "\1\32\1\62\1\32\3\104\7\32\1\33\7\32\1\34"+
    "\25\32\3\105\7\32\1\33\5\15\2\32\1\34\1\32"+
    "\12\15\1\121\4\15\1\32\1\15\1\32\5\15\1\32"+
    "\1\15\3\32\2\44\1\107\10\44\1\122\34\44\50\0"+
    "\2\32\1\33\5\15\2\32\1\34\1\32\1\51\16\15"+
    "\1\32\1\15\1\32\5\15\1\32\1\15\5\32\1\33"+
    "\5\15\2\32\1\34\1\32\1\15\1\37\15\15\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\5\32\1\33\5\15"+
    "\2\32\1\34\1\32\4\15\1\123\12\15\1\32\1\15"+
    "\1\32\5\15\1\32\1\15\5\32\1\33\5\15\2\32"+
    "\1\34\1\32\4\15\1\124\12\15\1\32\1\15\1\32"+
    "\5\15\1\32\1\15\5\32\1\33\5\15\2\32\1\34"+
    "\1\32\2\15\1\125\14\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\5\15\2\32\1\34\1\32"+
    "\15\15\1\37\1\15\1\32\1\15\1\32\5\15\1\32"+
    "\1\15\5\32\1\33\5\15\2\32\1\34\1\32\4\15"+
    "\1\126\12\15\1\32\1\15\1\32\5\15\1\32\1\15"+
    "\5\32\1\33\5\15\2\32\1\34\1\32\4\15\1\127"+
    "\12\15\1\32\1\15\1\32\5\15\1\32\1\15\3\32"+
    "\2\130\1\131\45\130\2\32\1\33\5\15\2\32\1\34"+
    "\1\32\6\15\1\132\10\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\5\32\1\33\5\15\2\32\1\34\1\32"+
    "\14\15\1\132\2\15\1\32\1\15\1\32\5\15\1\32"+
    "\1\15\5\32\1\33\5\15\2\32\1\34\1\32\17\15"+
    "\1\133\1\15\1\32\5\15\1\32\1\15\5\32\1\33"+
    "\1\134\4\15\2\32\1\34\1\32\17\15\1\32\1\15"+
    "\1\32\5\15\1\32\1\15\5\32\1\33\5\15\2\32"+
    "\1\34\1\32\1\112\16\15\1\32\1\15\1\32\5\15"+
    "\1\32\1\15\3\32\2\130\1\135\10\130\1\0\34\130"+
    "\2\32\1\33\5\15\2\32\1\34\1\32\5\15\1\112"+
    "\11\15\1\32\1\15\1\32\5\15\1\32\1\15\5\32"+
    "\1\33\5\15\2\32\1\34\1\32\16\15\1\136\1\32"+
    "\1\15\1\32\5\15\1\32\1\15\3\32\2\130\1\135"+
    "\45\130\2\32\1\33\5\15\2\32\1\34\1\32\1\73"+
    "\16\15\1\32\1\15\1\32\5\15\1\32\1\15\3\32";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\30\1\3\0\10\1\1\0\21\1\1\0\20\1"+
    "\1\11\20\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[94];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	int get_line(){return yyline;}
	int get_column(){return yycolumn;}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OberonScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OberonScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2298) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException, LexicalException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { throw new MismatchedCommentException();
          }
        case 13: break;
        case 2: 
          { return "Operator";
          }
        case 14: break;
        case 12: 
          { return "Keyword";
          }
        case 15: break;
        case 9: 
          { throw new IllegalIntegerException();
          }
        case 16: break;
        case 10: 
          { throw new IllegalOctalException();
          }
        case 17: break;
        case 8: 
          { return "ReservedWoed";
          }
        case 18: break;
        case 4: 
          { /* just skip what was found, do nothing */
          }
        case 19: break;
        case 6: 
          { if (yylength() > 12)
					throw new IllegalIntegerRangeException();
				else {
					return "Number";
				}
          }
        case 20: break;
        case 5: 
          { return "Punctuation";
          }
        case 21: break;
        case 3: 
          { if (yylength() > 24)
					throw new IllegalIdentifierLengthException();
				else {
					return "Identifier";
				}
          }
        case 22: break;
        case 11: 
          { return "comment";
          }
        case 23: break;
        case 1: 
          { throw new IllegalSymbolException();
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return "EOF";
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
