
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import exceptions.*;
import callgraph.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\012\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\005\004" +
    "\000\002\005\002\000\002\006\007\000\002\006\002\000" +
    "\002\007\004\000\002\007\002\000\002\010\007\000\002" +
    "\010\002\000\002\011\004\000\002\011\002\000\002\012" +
    "\007\000\002\012\002\000\002\013\006\000\002\013\002" +
    "\000\002\014\006\000\002\041\005\000\002\042\005\000" +
    "\002\042\004\000\002\042\002\000\002\047\005\000\002" +
    "\047\003\000\002\043\006\000\002\015\003\000\002\015" +
    "\002\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\046\005\000\002\016\005\000\002\016\003\000" +
    "\002\017\005\000\002\017\002\000\002\045\006\000\002" +
    "\037\003\000\002\037\005\000\002\020\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\002\000\002\022\007\000" +
    "\002\023\011\000\002\024\007\000\002\024\002\000\002" +
    "\036\004\000\002\036\002\000\002\025\004\000\002\026" +
    "\005\000\002\026\002\000\002\027\005\000\002\027\003" +
    "\000\002\027\002\000\002\030\006\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\031\003\000\002\031" +
    "\004\000\002\031\004\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\003\000\002\033\003\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\034\004\000\002\034\003\000\002\034" +
    "\005\000\002\035\004\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\032\005\001\002\000\004\002\240\001" +
    "\002\000\004\060\006\001\002\000\004\050\007\001\002" +
    "\000\016\033\010\034\ufffb\035\ufffb\036\ufffb\045\ufffb\046" +
    "\ufffb\001\002\000\016\034\ufff9\035\ufff9\036\ufff9\045\ufff9" +
    "\046\ufff9\060\ufff9\001\002\000\006\045\140\046\ufffe\001" +
    "\002\000\014\034\014\035\ufff7\036\ufff7\045\ufff7\046\ufff7" +
    "\001\002\000\012\035\123\036\ufff3\045\ufff3\046\ufff3\001" +
    "\002\000\014\035\ufff5\036\ufff5\045\ufff5\046\ufff5\060\ufff5" +
    "\001\002\000\014\035\ufff8\036\ufff8\045\ufff8\046\ufff8\060" +
    "\016\001\002\000\004\012\017\001\002\000\010\030\020" +
    "\031\025\060\022\001\002\000\010\046\uffdd\050\uffdd\060" +
    "\111\001\002\000\004\050\106\001\002\000\010\046\uffe4" +
    "\050\uffe4\057\uffe4\001\002\000\010\046\uffe2\050\uffe2\057" +
    "\uffe2\001\002\000\010\046\uffe3\050\uffe3\057\uffe3\001\002" +
    "\000\014\004\031\005\026\056\037\060\036\061\027\001" +
    "\002\000\010\056\037\060\036\061\027\001\002\000\060" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\044\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\052\uffb2\055\uffb2\057\uffb2\001\002\000\060\004\uffb9" +
    "\005\uffb9\006\075\007\074\010\072\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\073\040\uffb9" +
    "\041\uffb9\042\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\052" +
    "\uffb9\055\uffb9\057\uffb9\001\002\000\010\056\037\060\036" +
    "\061\027\001\002\000\050\004\066\005\067\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\070\040\uffbf" +
    "\041\uffbf\042\uffbf\044\uffbf\046\uffbf\047\uffbf\050\uffbf\052" +
    "\uffbf\055\uffbf\057\uffbf\001\002\000\004\047\064\001\002" +
    "\000\016\012\051\013\055\014\050\015\053\016\052\017" +
    "\054\001\002\000\060\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\040\uffb8\041\uffb8\042\uffb8\044\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\052\uffb8\055\uffb8\057\uffb8\001" +
    "\002\000\006\053\043\054\044\001\002\000\014\004\031" +
    "\005\026\056\037\060\036\061\027\001\002\000\004\057" +
    "\041\001\002\000\060\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\052\uffb1\055\uffb1\057\uffb1\001" +
    "\002\000\060\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020" +
    "\uffb3\021\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\052\uffb3\055\uffb3\057\uffb3\001\002\000" +
    "\004\060\047\001\002\000\014\004\031\005\026\056\037" +
    "\060\036\061\027\001\002\000\004\055\046\001\002\000" +
    "\062\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf" +
    "\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\021\uffaf\040\uffaf\041\uffaf\042\uffaf\044\uffaf\046\uffaf" +
    "\047\uffaf\050\uffaf\052\uffaf\055\uffaf\057\uffaf\001\002\000" +
    "\062\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\040\uffb0\041\uffb0\042\uffb0\044\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\052\uffb0\055\uffb0\057\uffb0\001\002\000" +
    "\014\004\031\005\026\056\037\060\036\061\027\001\002" +
    "\000\014\004\031\005\026\056\037\060\036\061\027\001" +
    "\002\000\014\004\031\005\026\056\037\060\036\061\027" +
    "\001\002\000\014\004\031\005\026\056\037\060\036\061" +
    "\027\001\002\000\014\004\031\005\026\056\037\060\036" +
    "\061\027\001\002\000\014\004\031\005\026\056\037\060" +
    "\036\061\027\001\002\000\026\040\uffc4\041\uffc4\042\uffc4" +
    "\044\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\055\uffc4\057" +
    "\uffc4\001\002\000\026\040\uffc1\041\uffc1\042\uffc1\044\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\052\uffc1\055\uffc1\057\uffc1\001" +
    "\002\000\026\040\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\052\uffc3\055\uffc3\057\uffc3\001\002\000" +
    "\026\040\uffc0\041\uffc0\042\uffc0\044\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\052\uffc0\055\uffc0\057\uffc0\001\002\000\026\040" +
    "\uffc5\041\uffc5\042\uffc5\044\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\052\uffc5\055\uffc5\057\uffc5\001\002\000\026\040\uffc2\041" +
    "\uffc2\042\uffc2\044\uffc2\046\uffc2\047\uffc2\050\uffc2\052\uffc2" +
    "\055\uffc2\057\uffc2\001\002\000\010\030\020\031\025\060" +
    "\022\001\002\000\010\046\uffdc\050\uffdc\057\uffdc\001\002" +
    "\000\010\056\037\060\036\061\027\001\002\000\010\056" +
    "\037\060\036\061\027\001\002\000\010\056\037\060\036" +
    "\061\027\001\002\000\060\004\uffba\005\uffba\006\075\007" +
    "\074\010\072\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\073\040\uffba\041\uffba\042\uffba\044" +
    "\uffba\046\uffba\047\uffba\050\uffba\052\uffba\055\uffba\057\uffba" +
    "\001\002\000\010\056\037\060\036\061\027\001\002\000" +
    "\010\056\037\060\036\061\027\001\002\000\010\056\037" +
    "\060\036\061\027\001\002\000\010\056\037\060\036\061" +
    "\027\001\002\000\060\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\040\uffb7\041\uffb7\042\uffb7\044\uffb7" +
    "\046\uffb7\047\uffb7\050\uffb7\052\uffb7\055\uffb7\057\uffb7\001" +
    "\002\000\060\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\052\uffb6\055\uffb6\057\uffb6\001\002\000" +
    "\060\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\044\uffb4\046\uffb4\047\uffb4" +
    "\050\uffb4\052\uffb4\055\uffb4\057\uffb4\001\002\000\060\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\044\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\052\uffb5\055\uffb5\057\uffb5\001\002\000\060\004\uffbb\005" +
    "\uffbb\006\075\007\074\010\072\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\073\040\uffbb\041" +
    "\uffbb\042\uffbb\044\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb" +
    "\055\uffbb\057\uffbb\001\002\000\060\004\uffbc\005\uffbc\006" +
    "\075\007\074\010\072\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\073\040\uffbc\041\uffbc\042" +
    "\uffbc\044\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc\055\uffbc" +
    "\057\uffbc\001\002\000\050\004\066\005\067\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\070\040\uffbe" +
    "\041\uffbe\042\uffbe\044\uffbe\046\uffbe\047\uffbe\050\uffbe\052" +
    "\uffbe\055\uffbe\057\uffbe\001\002\000\050\004\066\005\067" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\070\040\uffbd\041\uffbd\042\uffbd\044\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\052\uffbd\055\uffbd\057\uffbd\001\002\000\014\035" +
    "\ufff6\036\ufff6\045\ufff6\046\ufff6\060\ufff6\001\002\000\006" +
    "\046\uffdf\050\uffdf\001\002\000\006\051\117\052\116\001" +
    "\002\000\006\051\uffdb\052\uffdb\001\002\000\006\046\114" +
    "\050\113\001\002\000\010\046\uffdd\050\uffdd\060\111\001" +
    "\002\000\010\046\uffe1\050\uffe1\057\uffe1\001\002\000\006" +
    "\046\uffe0\050\uffe0\001\002\000\004\060\121\001\002\000" +
    "\010\030\020\031\025\060\022\001\002\000\006\046\uffde" +
    "\050\uffde\001\002\000\006\051\uffda\052\uffda\001\002\000" +
    "\010\036\131\045\uffef\046\uffef\001\002\000\012\036\ufff1" +
    "\045\ufff1\046\ufff1\060\ufff1\001\002\000\012\036\ufff4\045" +
    "\ufff4\046\ufff4\060\111\001\002\000\006\051\126\052\116" +
    "\001\002\000\010\030\020\031\025\060\022\001\002\000" +
    "\004\050\130\001\002\000\012\036\ufff2\045\ufff2\046\ufff2" +
    "\060\ufff2\001\002\000\004\060\211\001\002\000\006\045" +
    "\ufffd\046\ufffd\001\002\000\004\050\134\001\002\000\016" +
    "\033\010\034\ufffb\035\ufffb\036\ufffb\045\ufffb\046\ufffb\001" +
    "\002\000\006\045\140\046\ufffe\001\002\000\004\050\137" +
    "\001\002\000\006\045\ufff0\046\ufff0\001\002\000\014\037" +
    "\146\043\144\046\uffd3\050\uffd3\060\150\001\002\000\004" +
    "\046\142\001\002\000\004\060\143\001\002\000\004\050" +
    "\uffee\001\002\000\014\004\031\005\026\056\037\060\036" +
    "\061\027\001\002\000\012\041\uffd7\042\uffd7\046\uffd7\050" +
    "\uffd7\001\002\000\014\004\031\005\026\056\037\060\036" +
    "\061\027\001\002\000\012\041\uffd9\042\uffd9\046\uffd9\050" +
    "\uffd9\001\002\000\020\041\uffca\042\uffca\046\uffca\050\uffca" +
    "\053\043\054\044\056\161\001\002\000\012\041\uffd6\042" +
    "\uffd6\046\uffd6\050\uffd6\001\002\000\012\041\uffd4\042\uffd4" +
    "\046\uffd4\050\uffd4\001\002\000\012\041\uffd5\042\uffd5\046" +
    "\uffd5\050\uffd5\001\002\000\006\046\uffff\050\155\001\002" +
    "\000\020\037\146\041\uffd3\042\uffd3\043\144\046\uffd3\050" +
    "\uffd3\060\150\001\002\000\012\041\uffd8\042\uffd8\046\uffd8" +
    "\050\uffd8\001\002\000\004\011\167\001\002\000\012\041" +
    "\uffcc\042\uffcc\046\uffcc\050\uffcc\001\002\000\020\004\031" +
    "\005\026\052\uffc7\056\037\057\uffc7\060\036\061\027\001" +
    "\002\000\006\052\164\057\165\001\002\000\006\052\uffc8" +
    "\057\uffc8\001\002\000\014\004\031\005\026\056\037\060" +
    "\036\061\027\001\002\000\012\041\uffcb\042\uffcb\046\uffcb" +
    "\050\uffcb\001\002\000\006\052\uffc9\057\uffc9\001\002\000" +
    "\014\004\031\005\026\056\037\060\036\061\027\001\002" +
    "\000\012\041\uffc6\042\uffc6\046\uffc6\050\uffc6\001\002\000" +
    "\004\040\172\001\002\000\020\037\146\041\uffd3\042\uffd3" +
    "\043\144\046\uffd3\050\uffd3\060\150\001\002\000\012\041" +
    "\uffcf\042\uffcf\046\uffcf\050\155\001\002\000\010\041\176" +
    "\042\175\046\uffcd\001\002\000\014\037\146\043\144\046" +
    "\uffd3\050\uffd3\060\150\001\002\000\014\004\031\005\026" +
    "\056\037\060\036\061\027\001\002\000\004\046\200\001" +
    "\002\000\012\041\uffd1\042\uffd1\046\uffd1\050\uffd1\001\002" +
    "\000\004\040\202\001\002\000\020\037\146\041\uffd3\042" +
    "\uffd3\043\144\046\uffd3\050\uffd3\060\150\001\002\000\012" +
    "\041\uffd0\042\uffd0\046\uffd0\050\155\001\002\000\006\046" +
    "\uffce\050\155\001\002\000\004\044\206\001\002\000\014" +
    "\037\146\043\144\046\uffd3\050\uffd3\060\150\001\002\000" +
    "\006\046\210\050\155\001\002\000\012\041\uffd2\042\uffd2" +
    "\046\uffd2\050\uffd2\001\002\000\006\050\uffea\056\213\001" +
    "\002\000\004\050\uffed\001\002\000\010\035\214\057\215" +
    "\060\uffe5\001\002\000\004\060\uffe6\001\002\000\004\050" +
    "\uffeb\001\002\000\006\050\uffe8\057\uffe8\001\002\000\006" +
    "\050\225\057\224\001\002\000\004\060\111\001\002\000" +
    "\006\051\222\052\116\001\002\000\010\030\020\031\025" +
    "\060\022\001\002\000\006\050\uffe7\057\uffe7\001\002\000" +
    "\004\050\uffec\001\002\000\006\035\214\060\uffe5\001\002" +
    "\000\006\050\uffe9\057\uffe9\001\002\000\004\046\230\001" +
    "\002\000\004\060\231\001\002\000\004\053\232\001\002" +
    "\000\004\002\001\001\002\000\016\034\ufffc\035\ufffc\036" +
    "\ufffc\045\ufffc\046\ufffc\060\234\001\002\000\004\012\235" +
    "\001\002\000\014\004\031\005\026\056\037\060\036\061" +
    "\027\001\002\000\004\050\237\001\002\000\016\034\ufffa" +
    "\035\ufffa\036\ufffa\045\ufffa\046\ufffa\060\ufffa\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\236\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\010\005\011" +
    "\001\001\000\004\006\232\001\001\000\004\003\226\001" +
    "\001\000\004\007\012\001\001\000\004\011\121\001\001" +
    "\000\004\010\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\020\045\023\046\022\001\001\000\010" +
    "\016\111\017\106\037\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\031\033\032\031\033\027\034\034\040\032\001\001\000" +
    "\010\032\104\033\027\034\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\103\033\027\034\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\041\001\001\000\014\031" +
    "\033\032\031\033\027\034\034\040\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\033\032\031\033\027\034\034\040\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\031\062\032\031\033\027\034\034\001\001" +
    "\000\012\031\061\032\031\033\027\034\034\001\001\000" +
    "\012\031\060\032\031\033\027\034\034\001\001\000\012" +
    "\031\057\032\031\033\027\034\034\001\001\000\012\031" +
    "\056\032\031\033\027\034\034\001\001\000\012\031\055" +
    "\032\031\033\027\034\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\064\045\023\046" +
    "\022\001\001\000\002\001\001\000\006\033\102\034\034" +
    "\001\001\000\006\033\101\034\034\001\001\000\006\033" +
    "\070\034\034\001\001\000\002\001\001\000\004\034\100" +
    "\001\001\000\004\034\077\001\001\000\004\034\076\001" +
    "\001\000\004\034\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\114\037\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\117\045\023\046\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\131\041\132\001" +
    "\001\000\004\012\123\001\001\000\004\037\124\001\001" +
    "\000\002\001\001\000\010\044\126\045\023\046\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\134\005" +
    "\011\014\135\001\001\000\004\003\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\153\021\146\022" +
    "\151\023\152\025\150\030\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\031\033\032" +
    "\031\033\027\034\034\040\204\001\001\000\002\001\001" +
    "\000\014\031\033\032\031\033\027\034\034\040\170\001" +
    "\001\000\002\001\001\000\006\026\157\035\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\155\022\151\023\152\025\150" +
    "\030\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\027\161\031\033\032\031\033\027" +
    "\034\034\040\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\033\032\031\033\027\034\034\040\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\033\032\031\033\027\034\034\040\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\172\021\146\022" +
    "\151\023\152\025\150\030\144\001\001\000\004\024\173" +
    "\001\001\000\004\036\176\001\001\000\016\020\203\021" +
    "\146\022\151\023\152\025\150\030\144\001\001\000\014" +
    "\031\033\032\031\033\027\034\034\040\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\202\021\146\022\151\023\152\025\150\030\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\206\021\146\022\151\023\152\025\150\030" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\211\001\001\000\002\001\001\000\010\015\217\043" +
    "\215\047\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\220\001" +
    "\001\000\002\001\001\000\010\044\222\045\023\046\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\217\043\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\031\033\032\031" +
    "\033\027\034\034\040\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
	graph = new CallGraph();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
	return getScanner().next_token(); 

    }


	public CallGraph graph;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // module_block ::= MODULE IDENTIFIER SEMI declarations begin_block END IDENTIFIER PERIOD 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		parser.graph.show();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("module_block",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= module_block EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin_block ::= BEGIN statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= const_declare type_declare var_declare procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // const_declare ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // const_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declare",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // const_list ::= const_list IDENTIFIER EQ expression SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // const_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declare ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_declare",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_list ::= type_list IDENTIFIER EQ type SEMI 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_declare ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // var_declare ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declare",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // var_list ::= var_list identifier_list COLON type SEMI 
            {
              Object RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedure_declaration ::= procedure_heading SEMI procedure_body SEMI 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedure_declaration ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedure_body ::= declarations begin_block END IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedure_heading ::= PROCEDURE IDENTIFIER formal_parameters 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id;
		parser.graph.addProcedure(id, id + "()");
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formal_parameters ::= LPAREN fp_section_list RPAREN 
            {
              String RESULT =null;
		int fp_s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fp_s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String fp_s_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = fp_s_l.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_parameters ::= LPAREN RPAREN 
            {
              String RESULT =null;
		
		RESULT = "";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_parameters ::= 
            {
              String RESULT =null;
		
		RESULT = "";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal_parameters",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fp_section_list ::= fp_section_list SEMI fp_section 
            {
              String RESULT =null;
		int fp_s_lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fp_s_lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String fp_s_l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fp_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fp_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp_s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = fp_s_l.toString() + ", " + fp_s.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fp_section_list ::= fp_section 
            {
              String RESULT =null;
		int fp_sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fp_sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fp_s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = fp_s.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section_list",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fp_section ::= var_if identifier_list COLON type 
            {
              String RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = "";
		String temp = t.toString();
		for (int i = 0; i < id_list.intValue(); i++) {
			RESULT += temp;
			if (i != id_list.intValue() - 1) RESULT += ", ";
		}
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fp_section",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // var_if ::= VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var_if ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= IDENTIFIER 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= array_type 
            {
              String RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String at = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = at.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= record_type 
            {
              String RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = rt.toString();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // record_type ::= RECORD field_list END 
            {
              String RESULT =null;
		
		RESULT = "RECORD";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_type",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // field_list ::= field_list SEMI field_one 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // field_list ::= field_one 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // field_one ::= identifier_list COLON type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_one ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_one",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // array_type ::= ARRAY expression OF type 
            {
              String RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = t.toString() + "[" + ex.intValue() + "]";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // identifier_list ::= IDENTIFIER 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = new Integer(1);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identifier_list ::= identifier_list COMMA IDENTIFIER 
            {
              Integer RESULT =null;
		int id_listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id_listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer id_list = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = id_list.intValue() + 1;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement_sequence ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement_sequence ::= statement_sequence SEMI statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= procedure_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // while_statement ::= WHILE expression DO statement_sequence END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_statement",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // if_statement ::= IF expression THEN statement_sequence elsif_statement else_statement END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_statement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elsif_statement ::= elsif_statement ELSIF expression THEN statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elsif_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsif_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // else_statement ::= ELSE statement_sequence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // else_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // procedure_call ::= IDENTIFIER actual_parameters 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_call",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // actual_parameters ::= LPAREN ap_list RPAREN 
            {
              Object RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // actual_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actual_parameters",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ap_list ::= ap_list COMMA expression 
            {
              Object RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ap_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ap_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ap_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assignment ::= IDENTIFIER selector ASSIGN expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= simple_expression EQ simple_expression 
            {
              Integer RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object se2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= simple_expression NEQ simple_expression 
            {
              Integer RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object se2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= simple_expression LE simple_expression 
            {
              Integer RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object se2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= simple_expression LT simple_expression 
            {
              Integer RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object se2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= simple_expression GE simple_expression 
            {
              Integer RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object se2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= simple_expression GT simple_expression 
            {
              Integer RESULT =null;
		int se1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int se1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object se1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int se2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int se2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object se2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_expression ::= term_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // simple_expression ::= PLUS term_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // simple_expression ::= MINUS term_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // term_list ::= term_list PLUS term 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // term_list ::= term_list MINUS term 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // term_list ::= term_list OR term 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // term_list ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_list",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // term ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // term ::= term TIMES factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // term ::= term DIVIDE factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // term ::= term MOD factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // term ::= term AND factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // factor ::= IDENTIFIER selector 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // factor ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // selector ::= PERIOD IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // selector ::= LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
