/* The following code was generated by JFlex 1.4.1 on 12/28/17 1:53 PM */

/* oberon.flex */
/* --------------------------Usercode Section------------------------ */

import java.io.*;
import exceptions.*;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 12/28/17 1:53 PM from the specification file
 * <tt>oberon.flex</tt>
 */
public class OberonScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\7\1\14\1\13\1\16\1\0\1\13\1\15\16\7\4\0\1\13"+
    "\2\0\1\31\1\6\1\0\1\35\1\0\1\1\1\3\1\2\1\20"+
    "\1\5\1\21\1\56\1\0\1\11\7\12\2\10\1\27\1\4\1\32"+
    "\1\30\1\33\2\0\1\54\1\47\1\51\1\22\1\42\1\37\1\50"+
    "\1\41\1\23\2\6\1\44\1\25\1\43\1\26\1\53\1\6\1\34"+
    "\1\45\1\40\1\52\1\24\1\46\1\6\1\55\1\6\1\57\1\0"+
    "\1\60\1\0\1\6\1\0\1\54\1\47\1\51\1\22\1\42\1\37"+
    "\1\50\1\41\1\23\2\6\1\44\1\25\1\43\1\26\1\53\1\6"+
    "\1\34\1\45\1\40\1\52\1\24\1\46\1\6\1\55\1\6\1\0"+
    "\1\17\1\0\1\36\41\7\2\0\4\6\4\0\1\6\2\0\1\7"+
    "\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6"+
    "\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7"+
    "\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0"+
    "\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0"+
    "\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0"+
    "\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0"+
    "\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0"+
    "\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0"+
    "\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6"+
    "\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6"+
    "\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7"+
    "\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0"+
    "\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6"+
    "\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0"+
    "\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6"+
    "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"+
    "\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7"+
    "\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"+
    "\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0"+
    "\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7"+
    "\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7"+
    "\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7"+
    "\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6"+
    "\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6"+
    "\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6"+
    "\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0"+
    "\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0"+
    "\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6"+
    "\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0"+
    "\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6"+
    "\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0"+
    "\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7"+
    "\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7"+
    "\4\6\1\7\4\6\3\7\2\6\11\0\300\6\47\7\25\0\4\7"+
    "\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0"+
    "\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0"+
    "\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0"+
    "\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0"+
    "\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0"+
    "\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0"+
    "\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7"+
    "\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"+
    "\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7"+
    "\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6"+
    "\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6"+
    "\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0"+
    "\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6"+
    "\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0"+
    "\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0"+
    "\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6"+
    "\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7"+
    "\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6"+
    "\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0"+
    "\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6"+
    "\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6"+
    "\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6"+
    "\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7"+
    "\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6"+
    "\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6"+
    "\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\2\11\1\12\1\13\5\7\1\14\1\15\1\16"+
    "\1\17\1\20\1\7\1\21\1\22\7\7\1\23\1\24"+
    "\1\25\4\0\2\26\1\27\2\30\1\7\1\31\1\32"+
    "\3\7\1\33\1\34\1\35\1\36\1\37\14\7\1\0"+
    "\2\30\1\40\1\7\1\41\1\42\4\7\1\43\10\7"+
    "\1\26\1\44\3\7\1\45\1\46\1\47\1\7\1\50"+
    "\7\7\1\44\3\7\1\51\1\52\1\53\1\7\1\54"+
    "\1\55\1\7\1\56\1\26\1\0\1\7\1\57\1\60"+
    "\3\7\1\26\1\61\1\62\1\63\2\7\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\61\0\61\0\61\0\304"+
    "\0\365\0\u0126\0\61\0\u0157\0\61\0\61\0\u0188\0\u01b9"+
    "\0\u01ea\0\u021b\0\u024c\0\u027d\0\61\0\61\0\u02ae\0\u02df"+
    "\0\u0310\0\61\0\61\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\61\0\61\0\61\0\61\0\u0498\0\223"+
    "\0\u04c9\0\u04fa\0\61\0\u052b\0\u055c\0\u058d\0\u05be\0\304"+
    "\0\304\0\u05ef\0\u0620\0\u0651\0\304\0\304\0\61\0\61"+
    "\0\61\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930"+
    "\0\304\0\u0961\0\304\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56"+
    "\0\304\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\304\0\304"+
    "\0\304\0\u0d04\0\304\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9"+
    "\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\304\0\u0f50"+
    "\0\304\0\u0f81\0\304\0\304\0\u0fb2\0\304\0\u0e8c\0\u0fe3"+
    "\0\u1014\0\304\0\304\0\u1045\0\u1076\0\u10a7\0\u10d8\0\304"+
    "\0\304\0\304\0\u1109\0\u113a\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\11\2\13\1\14\1\13\1\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\10\1\34"+
    "\1\10\1\35\3\10\1\36\1\37\1\10\1\40\1\10"+
    "\1\41\1\42\1\10\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\57\46\1\51\1\52\57\46\1\47\1\50\1\53"+
    "\56\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\10\2\46\17\10\4\46\1\47\1\50"+
    "\3\46\1\54\1\46\3\11\7\46\5\54\5\46\1\54"+
    "\2\46\17\54\4\46\1\47\1\50\3\46\1\54\1\46"+
    "\1\55\2\12\4\46\1\56\2\46\5\54\5\46\1\54"+
    "\2\46\17\54\4\46\1\47\1\50\13\46\1\13\43\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\1\10"+
    "\1\57\2\10\1\60\5\46\1\10\2\46\17\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\1\61\3\10\1\62\12\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\15\10\1\63\1\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\4\10\1\64"+
    "\5\46\1\10\2\46\17\10\4\46\1\47\1\50\3\46"+
    "\5\10\1\46\1\10\5\46\5\10\5\46\1\65\2\46"+
    "\1\66\16\10\4\46\1\47\1\50\25\46\1\67\31\46"+
    "\1\47\1\50\25\46\1\70\31\46\1\47\1\50\25\46"+
    "\1\71\31\46\1\47\1\50\3\46\5\10\1\46\1\10"+
    "\5\46\5\10\5\46\1\10\2\46\3\10\1\72\13\10"+
    "\4\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\10\2\46\2\10\1\73\13\10\1\74"+
    "\4\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\10\2\46\4\10\1\75\1\76\11\10"+
    "\4\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\77\2\46\2\10\1\100\14\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\4\10"+
    "\1\101\5\46\1\10\2\46\3\10\1\102\13\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\4\10"+
    "\1\103\5\46\1\10\2\46\17\10\4\46\1\47\1\50"+
    "\3\46\5\10\1\46\1\10\5\46\5\10\5\46\1\104"+
    "\2\46\17\10\4\46\1\47\1\50\3\46\5\10\1\46"+
    "\1\10\5\46\5\10\5\46\1\105\2\46\17\10\4\46"+
    "\1\51\1\0\57\46\1\51\1\50\56\46\2\52\1\106"+
    "\56\52\1\46\1\47\1\50\3\46\5\54\1\46\1\54"+
    "\5\46\5\54\5\46\1\54\2\46\17\54\4\46\1\47"+
    "\1\50\3\46\1\54\1\46\1\55\2\107\4\46\1\56"+
    "\2\46\5\54\5\46\1\54\2\46\17\54\4\46\1\47"+
    "\1\50\5\46\1\56\2\110\4\46\1\56\42\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\2\10\1\111"+
    "\2\10\5\46\1\10\2\46\17\10\4\46\1\47\1\50"+
    "\3\46\5\10\1\46\1\10\5\46\5\10\5\46\1\10"+
    "\2\46\1\10\1\112\15\10\4\46\1\47\1\50\3\46"+
    "\5\10\1\46\1\10\5\46\5\10\5\46\1\113\2\46"+
    "\17\10\4\46\1\47\1\50\3\46\5\10\1\46\1\10"+
    "\5\46\1\114\4\10\5\46\1\10\2\46\17\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\12\10\1\115\2\10\1\116\1\10"+
    "\4\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\10\2\46\3\10\1\117\13\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\14\10\1\120\2\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\1\121\4\10"+
    "\5\46\1\10\2\46\17\10\4\46\1\47\1\50\3\46"+
    "\5\10\1\46\1\10\5\46\5\10\5\46\1\10\2\46"+
    "\6\10\1\122\10\10\4\46\1\47\1\50\3\46\5\10"+
    "\1\46\1\10\5\46\1\10\1\123\3\10\5\46\1\10"+
    "\2\46\17\10\4\46\1\47\1\50\3\46\5\10\1\46"+
    "\1\10\5\46\1\10\1\124\3\10\5\46\1\10\2\46"+
    "\17\10\4\46\1\47\1\50\3\46\5\10\1\46\1\10"+
    "\5\46\4\10\1\125\5\46\1\10\2\46\17\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\11\10\1\126\5\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\5\10\5\46"+
    "\1\10\2\46\4\10\1\127\12\10\4\46\1\47\1\50"+
    "\3\46\5\10\1\46\1\10\5\46\4\10\1\130\5\46"+
    "\1\10\2\46\17\10\4\46\1\47\1\50\3\46\5\10"+
    "\1\46\1\10\5\46\5\10\5\46\1\131\2\46\17\10"+
    "\3\46\2\52\1\132\1\133\55\52\1\46\1\47\1\50"+
    "\3\46\1\54\1\46\3\107\7\46\5\54\5\46\1\54"+
    "\2\46\17\54\4\46\1\47\1\50\5\46\3\110\47\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\3\10\1\134\13\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\5\10\5\46"+
    "\1\10\2\46\13\10\1\135\3\10\4\46\1\47\1\50"+
    "\3\46\5\10\1\46\1\10\5\46\4\10\1\136\5\46"+
    "\1\10\2\46\17\10\4\46\1\47\1\50\3\46\5\10"+
    "\1\46\1\10\5\46\1\137\4\10\5\46\1\10\2\46"+
    "\17\10\4\46\1\47\1\50\3\46\5\10\1\46\1\10"+
    "\5\46\5\10\5\46\1\10\2\46\4\10\1\140\12\10"+
    "\4\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\10\2\46\3\10\1\141\13\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\1\10"+
    "\1\142\3\10\5\46\1\10\2\46\3\10\1\143\13\10"+
    "\4\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\10\2\46\1\10\1\144\15\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\5\10\1\145\11\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\5\10\5\46"+
    "\1\10\2\46\5\10\1\146\11\10\4\46\1\47\1\50"+
    "\3\46\5\10\1\46\1\10\5\46\1\10\1\147\3\10"+
    "\5\46\1\10\2\46\17\10\4\46\1\47\1\50\3\46"+
    "\5\10\1\46\1\10\5\46\5\10\5\46\1\10\2\46"+
    "\6\10\1\150\10\10\4\46\1\47\1\50\3\46\5\10"+
    "\1\46\1\10\5\46\5\10\5\46\1\10\2\46\12\10"+
    "\1\151\4\10\4\46\1\47\1\50\3\46\5\10\1\46"+
    "\1\10\5\46\5\10\5\46\1\10\2\46\15\10\1\152"+
    "\1\10\3\46\2\52\1\132\1\153\55\52\61\0\1\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\11\10\1\154\5\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\5\10\5\46"+
    "\1\10\2\46\5\10\1\155\11\10\4\46\1\47\1\50"+
    "\3\46\5\10\1\46\1\10\5\46\5\10\5\46\1\156"+
    "\2\46\17\10\4\46\1\47\1\50\3\46\5\10\1\46"+
    "\1\10\5\46\5\10\5\46\1\10\2\46\1\157\16\10"+
    "\4\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\10\2\46\3\10\1\160\13\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\3\10\1\161\13\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\5\10\5\46"+
    "\1\10\2\46\3\10\1\162\13\10\4\46\1\47\1\50"+
    "\3\46\5\10\1\46\1\10\5\46\5\10\5\46\1\10"+
    "\2\46\4\10\1\163\12\10\4\46\1\47\1\50\3\46"+
    "\5\10\1\46\1\10\5\46\5\10\5\46\1\10\2\46"+
    "\1\10\1\164\15\10\4\46\1\47\1\50\3\46\5\10"+
    "\1\46\1\10\5\46\5\10\5\46\1\10\2\46\3\10"+
    "\1\165\13\10\4\46\1\47\1\50\3\46\5\10\1\46"+
    "\1\10\5\46\5\10\5\46\1\10\2\46\16\10\1\166"+
    "\3\46\2\167\1\170\56\167\1\46\1\47\1\50\3\46"+
    "\5\10\1\46\1\10\5\46\5\10\5\46\1\10\2\46"+
    "\3\10\1\171\13\10\4\46\1\47\1\50\3\46\5\10"+
    "\1\46\1\10\5\46\5\10\5\46\1\10\2\46\3\10"+
    "\1\172\13\10\4\46\1\47\1\50\3\46\5\10\1\46"+
    "\1\10\5\46\1\173\4\10\5\46\1\10\2\46\17\10"+
    "\4\46\1\47\1\50\3\46\5\10\1\46\1\10\5\46"+
    "\5\10\5\46\1\10\2\46\5\10\1\174\11\10\4\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\10\2\46\15\10\1\175\1\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\1\176\4\10"+
    "\5\46\1\10\2\46\17\10\3\46\2\167\1\177\1\0"+
    "\55\167\1\46\1\47\1\50\3\46\5\10\1\46\1\10"+
    "\5\46\5\10\5\46\1\200\2\46\17\10\4\46\1\47"+
    "\1\50\3\46\5\10\1\46\1\10\5\46\5\10\5\46"+
    "\1\10\2\46\4\10\1\201\12\10\4\46\1\47\1\50"+
    "\3\46\5\10\1\46\1\10\5\46\5\10\5\46\1\10"+
    "\2\46\4\10\1\202\12\10\4\46\1\47\1\50\3\46"+
    "\5\10\1\46\1\10\5\46\5\10\5\46\1\10\2\46"+
    "\13\10\1\203\3\10\3\46\2\167\1\177\56\167\1\46"+
    "\1\47\1\50\3\46\5\10\1\46\1\10\5\46\5\10"+
    "\5\46\1\204\2\46\17\10\4\46\1\47\1\50\3\46"+
    "\5\10\1\46\1\10\5\46\5\10\5\46\1\10\2\46"+
    "\3\10\1\205\13\10\3\46";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4459];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\44\1\4\0\34\1\1\0\24\1\1\11\34\1"+
    "\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[133];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	int get_line(){return yyline;}
	int get_column(){return yycolumn;}

	/* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
	private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OberonScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OberonScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2298) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, LexicalException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return symbol(sym.WRITE);
          }
        case 53: break;
        case 28: 
          { return symbol(sym.OF);
          }
        case 54: break;
        case 22: 
          { throw new MismatchedCommentException(yytext());
          }
        case 55: break;
        case 4: 
          { return symbol(sym.RPAREN);
          }
        case 56: break;
        case 16: 
          { return symbol(sym.GT);
          }
        case 57: break;
        case 35: 
          { return symbol(sym.END);
          }
        case 58: break;
        case 15: 
          { return symbol(sym.LT);
          }
        case 59: break;
        case 20: 
          { return symbol(sym.LBRACKET);
          }
        case 60: break;
        case 44: 
          { return symbol(sym.BEGIN);
          }
        case 61: break;
        case 18: 
          { return symbol(sym.NOT);
          }
        case 62: break;
        case 17: 
          { return symbol(sym.AND);
          }
        case 63: break;
        case 9: 
          { /* just skip what was found, do nothing */
          }
        case 64: break;
        case 47: 
          { return symbol(sym.MODULE);
          }
        case 65: break;
        case 36: 
          { /*Do nothing*/
          }
        case 66: break;
        case 29: 
          { return symbol(sym.ASSIGN);
          }
        case 67: break;
        case 48: 
          { return symbol(sym.RECORD);
          }
        case 68: break;
        case 10: 
          { return symbol(sym.PLUS);
          }
        case 69: break;
        case 34: 
          { return symbol(sym.MOD);
          }
        case 70: break;
        case 19: 
          { return symbol(sym.PERIOD);
          }
        case 71: break;
        case 46: 
          { return symbol(sym.ARRAY);
          }
        case 72: break;
        case 39: 
          { return symbol(sym.TYPE);
          }
        case 73: break;
        case 25: 
          { return symbol(sym.DO);
          }
        case 74: break;
        case 3: 
          { return symbol(sym.TIMES);
          }
        case 75: break;
        case 21: 
          { return symbol(sym.RBRACKET);
          }
        case 76: break;
        case 40: 
          { return symbol(sym.ELSE);
          }
        case 77: break;
        case 14: 
          { return symbol(sym.NEQ);
          }
        case 78: break;
        case 12: 
          { return symbol(sym.COLON);
          }
        case 79: break;
        case 41: 
          { return symbol(sym.ELSIF);
          }
        case 80: break;
        case 24: 
          { throw new IllegalOctalException(yytext());
          }
        case 81: break;
        case 38: 
          { return symbol(sym.THEN);
          }
        case 82: break;
        case 33: 
          { return symbol(sym.VAR);
          }
        case 83: break;
        case 43: 
          { return symbol(sym.WHILE);
          }
        case 84: break;
        case 52: 
          { return symbol(sym.PROCEDURE);
          }
        case 85: break;
        case 26: 
          { return symbol(sym.IF);
          }
        case 86: break;
        case 2: 
          { return symbol(sym.LPAREN);
          }
        case 87: break;
        case 50: 
          { return symbol(sym.WRITELN);
          }
        case 88: break;
        case 1: 
          { throw new IllegalSymbolException(yytext());
          }
        case 89: break;
        case 7: 
          { if (yylength() > 24)
					throw new IllegalIdentifierLengthException(yytext());
				else {
					return symbol(sym.IDENTIFIER, yytext());
				}
          }
        case 90: break;
        case 27: 
          { return symbol(sym.OR);
          }
        case 91: break;
        case 13: 
          { return symbol(sym.EQ);
          }
        case 92: break;
        case 5: 
          { return symbol(sym.SEMI);
          }
        case 93: break;
        case 49: 
          { return symbol(sym.INTEGER);
          }
        case 94: break;
        case 11: 
          { return symbol(sym.MINUS);
          }
        case 95: break;
        case 8: 
          { if (yylength() > 12)
					throw new IllegalIntegerRangeException(yytext());
				else {
					return symbol(sym.NUMBER, yytext());
				}
          }
        case 96: break;
        case 51: 
          { return symbol(sym.BOOLEAN);
          }
        case 97: break;
        case 37: 
          { return symbol(sym.READ);
          }
        case 98: break;
        case 31: 
          { return symbol(sym.GE);
          }
        case 99: break;
        case 32: 
          { return symbol(sym.DIVIDE);
          }
        case 100: break;
        case 45: 
          { return symbol(sym.CONST);
          }
        case 101: break;
        case 23: 
          { throw new IllegalIntegerException(yytext());
          }
        case 102: break;
        case 6: 
          { return symbol(sym.COMMA);
          }
        case 103: break;
        case 30: 
          { return symbol(sym.LE);
          }
        case 104: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return symbol(sym.EOF)
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
